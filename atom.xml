<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mrh929&#39;s home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrh1s.top/"/>
  <updated>2019-05-26T02:46:21.022Z</updated>
  <id>https://mrh1s.top/</id>
  
  <author>
    <name>mrh929</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>qwb_JustRe</title>
    <link href="https://mrh1s.top/posts/2946351e/"/>
    <id>https://mrh1s.top/posts/2946351e/</id>
    <published>2019-05-26T02:43:14.000Z</published>
    <updated>2019-05-26T02:46:21.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JustRe"><a href="#JustRe" class="headerlink" title="JustRe"></a>JustRe</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>程序读入了26位 十六进制数</p><p>其中前8为送入eax寄存器</p><p>把eax扩展为了16个字节 01234567012345670123456701234567 记作 <strong>input</strong></p><p>后两位（假设为ab） 填充为了ababababababababab…..ababab，记作 <strong>ab</strong></p><p>从内存中取16个字节，记作 <strong>key1</strong></p><p>还从内存取了16个字节，形如00000003000000020000000100000000 记作 <strong>key2</strong></p><p>key = (ab + key1)^ (input + key2) 并且将结果存在原来key1的位置</p><p>依次循环</p><blockquote><p>注意key2第二次  key2’ +=  key2 ，而不是直接从内存取</p></blockquote><p>接下来的循环 循环了八次，是对从0x405058的32个字节进行处理，每次四个字节</p><p>同样</p><p><strong>input</strong> 01 23 45 67</p><p><strong>key</strong> 从内存中取四个字节</p><p><strong>ab</strong> 用89位填充的四个字节</p><p><strong>esi</strong> 从0x10 开始 一直到0x18</p><p>key =  (ab + key) ^ (input + esi) 并且将结果存在key的位置</p><p>然后 0x405018 和 0x404148的 0x60个字节进行比较，要相等</p><p>事实证明，后面这些运算，对于解出input的帮助并不大，我们只需要解出一组input，并且判断它们是否是四个分块都相等即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">dec1 = <span class="number">0x4364162A031410D2EF95C26D80B899BD</span></span><br><span class="line">enc1 = <span class="number">0x405004A100000278EC81F0E483EC8B55</span></span><br><span class="line">key1 = <span class="number">0x00000003000000020000000100000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FILL</span><span class="params">(a)</span>:</span>  <span class="comment">#用八九位这一个字节去填充为16字节</span></span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">0x01010101010101010101010101010101</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DIVIDE</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res.append((a &lt;&lt; (<span class="number">32</span> * i) &amp; <span class="number">0xffffffffffffffffffffffffffffffff</span>) &gt;&gt; (<span class="number">32</span> * <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ADD</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a = DIVIDE(a)</span><br><span class="line">    b = DIVIDE(b)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res += ((a[i]+b[i]) &amp; <span class="number">0xffffffff</span>) &lt;&lt; (<span class="number">32</span> * (<span class="number">3</span>-i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CALC</span><span class="params">(dec,enc,key,t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (ADD(FILL(t),dec) ^ enc) - key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">100</span>):<span class="comment">#枚举第八第九位的所有情况</span></span><br><span class="line">    res = CALC(dec1,enc1,key1,t)</span><br><span class="line">    <span class="keyword">if</span>(inpu &amp; <span class="number">0xffffffff</span> == res &gt;&gt; (<span class="number">3</span> * <span class="number">32</span>)):</span><br><span class="line">        print(hex(CALC(dec1,enc1,key1,t) &gt;&gt; (<span class="number">3</span>*<span class="number">32</span>)),hex(t))</span><br></pre></td></tr></table></figure><blockquote><p>前十位 1324229810</p></blockquote><p>用来过验证的passwd：13242298100123456789abcdef</p><p>后面这个加密函数是好像藏在data区里面的，看起来应该是一个加密算法，谷歌了几个比较关键的常数，发现是个3des加密</p><p><a href="https://www.cnblogs.com/one--way/archive/2016/07/05/5643771.html" target="_blank" rel="noopener">https://www.cnblogs.com/one--way/archive/2016/07/05/5643771.html</a></p><p>密钥应该是这个 AFSAFCEDYCXCXACNDFKDCQXC</p><p>再配上解密后的密文（实际上只用到了16个字节，剩下的8个字节可要可不要）</p><p><strong>注意：大端序，不能直接复制，要先把顺序颠倒一下</strong></p><blockquote><p>轮子不太完整，修改了一下，以下是main函数中修改过的内容</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> k[<span class="number">32</span>] = <span class="string">"AFSAFCEDYCXCXACNDFKDCQXC"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">128</span>] = &#123;</span><br><span class="line">    <span class="number">0x50</span>,<span class="number">0x7C</span>,<span class="number">0xA9</span>,<span class="number">0xE6</span>,</span><br><span class="line">    <span class="number">0x87</span>,<span class="number">0x09</span>,<span class="number">0xCE</span>,<span class="number">0xFA</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0xD5</span>,<span class="number">0x0D</span>,<span class="number">0xCF</span>,</span><br><span class="line"><span class="number">0x90</span>,<span class="number">0xBB</span>,<span class="number">0x97</span>,<span class="number">0x6C</span>,<span class="number">0</span></span><br><span class="line">&#125;;  <span class="comment">/* 原始明文 */</span></span><br><span class="line">nlen = <span class="built_in">strlen</span>(data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">8</span>) &#123;</span><br><span class="line">        DES_ecb3_encrypt((const_DES_cblock *)(src + i), (DES_cblock *)(out + i), &amp;ks1, &amp;ks2, &amp;ks3, DES_DECRYPT);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"encrypted Hex:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02X"</span> , *(out + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"encrypted Bin:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, *(out + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="qwb_ctf20190526" scheme="https://mrh1s.top/categories/write-up/qwb-ctf20190526/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="3des" scheme="https://mrh1s.top/tags/3des/"/>
    
  </entry>
  
  <entry>
    <title>rctf_babyre2</title>
    <link href="https://mrh1s.top/posts/8b232dcf/"/>
    <id>https://mrh1s.top/posts/8b232dcf/</id>
    <published>2019-05-21T12:29:34.000Z</published>
    <updated>2019-05-21T12:51:36.686Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Rctf-babyre2"><a href="#Rctf-babyre2" class="headerlink" title="Rctf_babyre2"></a>Rctf_babyre2</h1><p><a href="\uploads\rctf_babyre2.7z">rctf_babyre2</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="alarm"><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h3><blockquote><p>程序一开头就有一个alarm函数，这会使我们在调试的时候中途退出，直接把call alarm nop掉即可</p></blockquote><h3 id="sub-55761565891A"><a href="#sub-55761565891A" class="headerlink" title="sub_55761565891A"></a>sub_55761565891A</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_55761565891A</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  print_notice();</span><br><span class="line">  <span class="built_in">memset</span>(a1, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, a1, <span class="number">0xFF</span>uLL);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)a1);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">7</span> )</span><br><span class="line">      v2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      print_notice();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    print_notice();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sub-5576156589CC"><a href="#sub-5576156589CC" class="headerlink" title="sub_5576156589CC"></a>sub_5576156589CC</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_5576156589CC</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  print_notice();</span><br><span class="line">  <span class="built_in">memset</span>(a1, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, a1, <span class="number">0xFF</span>uLL);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)a1);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt;= <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v4; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_BYTE *)a1 + i) &lt;= <span class="number">9</span> || *((_BYTE *)a1 + i) &gt; <span class="number">99</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          print_notice();</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      print_notice();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    print_notice();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的读入账户和密码，不赘述</p><blockquote><p>不赘述就出问题了</p><p>读密码的时候你没发现一个奇怪的事情吗？</p><p> if ( <em>((_BYTE </em>)a1 + i) &lt;= 9 || <em>((_BYTE </em>)a1 + i) &gt; 99 )</p><p>密码可以不是可见字符</p></blockquote><h3 id="sub-557615658ACE"><a href="#sub-557615658ACE" class="headerlink" title="sub_557615658ACE"></a>sub_557615658ACE</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">sub_557615658ACE</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+31h] [rbp-1Fh]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+32h] [rbp-1Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [rsp+33h] [rbp-1Dh]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [rsp+35h] [rbp-1Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [rsp+36h] [rbp-1Ah]</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// [rsp+39h] [rbp-17h]</span></span><br><span class="line">  <span class="keyword">char</span> v18; <span class="comment">// [rsp+3Ah] [rbp-16h]</span></span><br><span class="line">  <span class="keyword">char</span> v19; <span class="comment">// [rsp+3Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [rsp+3Dh] [rbp-13h]</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// [rsp+3Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [rsp+3Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v25; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v25 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v8 = <span class="number">-8</span>;</span><br><span class="line">  v9 = <span class="number">-44</span>;</span><br><span class="line">  v10 = <span class="number">-43</span>;</span><br><span class="line">  v11 = <span class="number">-36</span>;</span><br><span class="line">  v12 = <span class="number">-55</span>;</span><br><span class="line">  v13 = <span class="number">-38</span>;</span><br><span class="line">  v14 = <span class="number">-49</span>;</span><br><span class="line">  v15 = <span class="number">-50</span>;</span><br><span class="line">  v16 = <span class="number">-41</span>;</span><br><span class="line">  v17 = <span class="number">-38</span>;</span><br><span class="line">  v18 = <span class="number">-49</span>;</span><br><span class="line">  v19 = <span class="number">-46</span>;</span><br><span class="line">  v20 = <span class="number">-44</span>;</span><br><span class="line">  v21 = <span class="number">-43</span>;</span><br><span class="line">  v22 = <span class="number">-56</span>;</span><br><span class="line">  v23 = <span class="number">-102</span>;</span><br><span class="line">  v24 = <span class="number">-79</span>;</span><br><span class="line">  dest = <span class="number">0L</span>L;</span><br><span class="line">  v7 = <span class="number">0L</span>L;</span><br><span class="line">  v5 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)a1);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 &lt;= <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;dest, (<span class="keyword">const</span> <span class="keyword">void</span> *)a1, (<span class="keyword">signed</span> <span class="keyword">int</span>)v5);<span class="comment">// 复制内存</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; <span class="number">16</span> - (<span class="keyword">signed</span> <span class="keyword">int</span>)v5 &gt; i; ++i )</span><br><span class="line">      *((_BYTE *)&amp;dest + i + (<span class="keyword">signed</span> <span class="keyword">int</span>)v5) = i + <span class="number">1</span>;<span class="comment">// 对于没有满16位的account 自动补全16位(补全一个从0开始的递增序列)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(_QWORD *)(a1 + <span class="number">8</span>);</span><br><span class="line">    dest = *(_QWORD *)a1;</span><br><span class="line">    v7 = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_55761565981E(&amp;v8, <span class="number">17</span>, (__int64)&amp;dest, <span class="number">16</span>, (<span class="keyword">int</span> *)a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">sub_55761565981E</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">int</span> a2, __int64 a1, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v6; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  __int64 acc; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  acc = a1;</span><br><span class="line">  v6 = a5;</span><br><span class="line">  dest = <span class="number">0L</span>L;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( buf )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a1 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( a4 == <span class="number">16</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( a5 )</span><br><span class="line">          &#123;</span><br><span class="line">            *a5 = <span class="number">0</span>;</span><br><span class="line">            v9 = <span class="number">4</span> * (a2 / <span class="number">4</span> + <span class="number">1</span>);</span><br><span class="line">            dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v9 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ( dest )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span>(dest, buf, a2);</span><br><span class="line">              <span class="built_in">memset</span>(&amp;dest[a2], <span class="number">4</span> - a2 % <span class="number">4</span>, <span class="number">4</span> - a2 % <span class="number">4</span>);<span class="comment">// 填充了3</span></span><br><span class="line">              dest[v9] = <span class="number">0</span>;</span><br><span class="line">              xtea((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)dest, v9 / <span class="number">4</span>, acc);<span class="comment">// 这里是执行了加密的过程,account作为密钥</span></span><br><span class="line">              *v6 = v9;</span><br><span class="line">              v8 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dest )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(dest);</span><br><span class="line">      dest = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      *v6 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说就是利用xtea算法，将buf（上面的数组）加密了，密钥是账户名</p><h3 id="sub-557615658C02"><a href="#sub-557615658C02" class="headerlink" title="sub_557615658C02"></a>sub_557615658C02</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_557615658C02</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-81Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+18h] [rbp-818h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+18h] [rbp-818h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-814h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">2048</span>]; <span class="comment">// [rsp+20h] [rbp-810h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+820h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+828h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  print_notice();</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &amp; <span class="number">1</span> || v3 &gt; <span class="number">1024</span> )                    <span class="comment">// 长度不超过1024,且必须为偶数</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    print_notice();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v3; ++i )                  <span class="comment">// 检测输入是否合规</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (buf[i] &lt;= <span class="number">47</span> || buf[i] &gt; <span class="number">57</span>) &amp;&amp; (buf[i] &lt;= <span class="number">96</span> || buf[i] &gt; <span class="number">102</span>) &amp;&amp; (buf[i] &lt;= <span class="number">64</span> || buf[i] &gt; <span class="number">70</span>) )<span class="comment">// 只准输入数字，大小写的字母a~f</span></span><br><span class="line">      &#123;</span><br><span class="line">        print_notice();</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 )                                   <span class="comment">// 如果输入合规</span></span><br><span class="line">      v4 = sub_5576156587C6(buf, v3, (_QWORD *)a1);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读入了偶数个字节的数据，并且长度不超过1024，数据只能在0~9 a~f A~F的范围</p><h3 id="sub-557615658DD6"><a href="#sub-557615658DD6" class="headerlink" title="sub_557615658DD6"></a>sub_557615658DD6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__<span class="function">fastcall <span class="title">sub_557615658DD6</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *passwd, __int64 data, <span class="keyword">int</span> chunk, _DWORD *a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v5; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+3Ch] [rbp-14h]</span></span><br><span class="line">  _BYTE *ptr; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v6 = chunk;</span><br><span class="line">  v5 = a4;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  ptr = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( data )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( chunk &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( passwd )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = <span class="built_in">strlen</span>(passwd);</span><br><span class="line">        <span class="keyword">if</span> ( v10 &gt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          ptr = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span> ( ptr )</span><br><span class="line">          &#123;</span><br><span class="line">            ptr[v10] = <span class="number">0</span>;</span><br><span class="line">            v8 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v10; ++i )</span><br><span class="line">            &#123;</span><br><span class="line">              v11 = passwd[i] - (passwd[i] % <span class="number">10</span> + passwd[i] / <span class="number">10</span>);<span class="comment">// 由passwd生成了一个偏移地址</span></span><br><span class="line">              <span class="keyword">if</span> ( v11 &gt;= v6 )</span><br><span class="line">              &#123;</span><br><span class="line">                v8 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              ptr[i] = *(_BYTE *)(v11 + data);  <span class="comment">// ptr[i]就等于这个偏移地址上面的数据</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v8 )                           <span class="comment">// 若正常退出</span></span><br><span class="line">            &#123;</span><br><span class="line">              *v5 = v10;</span><br><span class="line">              v7 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v7 &amp;&amp; ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用passwd可以算出来一个偏移，对应着data中的数据，生成了一个ptr数组</p><h3 id="sub-557615658FB0"><a href="#sub-557615658FB0" class="headerlink" title="sub_557615658FB0"></a>sub_557615658FB0</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; passwd_len; ++j )</span><br><span class="line">    *((_BYTE *)&amp;dest + j) ^= <span class="number">0xCC</span>u;             <span class="comment">// ptr进行异或0xcc</span></span><br><span class="line">  ::ptr = sub_5576156599B9(v6, v7, (__int64)&amp;dest, <span class="number">16</span>, &amp;dword_55761585B058);</span><br></pre></td></tr></table></figure><p>sub_5576156599B9:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtea((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)dest, buf_len / <span class="number">-4</span>, v7);<span class="comment">// 这里执行解密的过程，解密encrypted，密钥为ptr_xor</span></span><br></pre></td></tr></table></figure><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><blockquote><p> xtea(xtea(buf, accout, ENCRYPT) ,f(data,passwd) , DECRYPT)</p></blockquote><blockquote><p>f(data, passwd) == accout</p></blockquote><p>passwd到data是一个很简单的映射，映射完之后要异或一个0xcc，异或结果应该刚好等于account</p><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><p>script from dalao</p><p><a href="https://balsn.tw/ctf_writeup/20190518-rctf2019/#babyre2" target="_blank" rel="noopener">https://balsn.tw/ctf_writeup/20190518-rctf2019/#babyre2</a></p><p>我自己还没用过pwntools。。。没想到要直接给程序传入非可见字符，所以就借用了一下国外大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">"139.180.215.222"</span>, <span class="number">20000</span>)</span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">"account"</span>)</span><br><span class="line">r.send(<span class="string">"a"</span>*<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">"password"</span>)</span><br><span class="line">r.send(<span class="string">"\x10"</span>*<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">"data"</span>)</span><br><span class="line">r.send(<span class="string">"010203040506070809ad0b0c0d0e0f"</span>) <span class="comment">#ad=61^cc</span></span><br><span class="line">r.shutdown(<span class="string">"send"</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="rctf-20190518" scheme="https://mrh1s.top/categories/write-up/rctf-20190518/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="xtea" scheme="https://mrh1s.top/tags/xtea/"/>
    
      <category term="pwntools" scheme="https://mrh1s.top/tags/pwntools/"/>
    
  </entry>
  
  <entry>
    <title>rctf_babyre1</title>
    <link href="https://mrh1s.top/posts/122a7c75/"/>
    <id>https://mrh1s.top/posts/122a7c75/</id>
    <published>2019-05-20T16:49:39.000Z</published>
    <updated>2019-05-21T12:51:31.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCTF-babyre1"><a href="#RCTF-babyre1" class="headerlink" title="RCTF_babyre1"></a>RCTF_babyre1</h1><p><a href="\uploads\rctf_babyre1.7z">rctf_babyre1</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>以下是与输入相关的指令</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 *in; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// rbx</span></span><br><span class="line">  __int64 i; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+4h] [rbp-124h]</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [rsp+8h] [rbp-120h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 str; <span class="comment">// [rsp+10h] [rbp-118h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v15; <span class="comment">// [rsp+118h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v15 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  ptr = <span class="number">0L</span>L;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;str, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, <span class="string">"Input right flag you can got 'Bingo!' :"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%31s"</span>, &amp;str);                 <span class="comment">// 输入为16位</span></span><br><span class="line">  in = &amp;str;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(_DWORD *)in;</span><br><span class="line">    in = (<span class="keyword">unsigned</span> __int64 *)((<span class="keyword">char</span> *)in + <span class="number">4</span>);</span><br><span class="line">    v5 = ~v4 &amp; (v4 - <span class="number">0x1010101</span>) &amp; <span class="number">0x80808080</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( !v5 );</span><br><span class="line">  <span class="keyword">if</span> ( !((<span class="keyword">unsigned</span> __int16)~(_WORD)v4 &amp; (<span class="keyword">unsigned</span> __int16)(v4 - <span class="number">0x101</span>) &amp; <span class="number">0x8080</span>) )</span><br><span class="line">    v5 &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !((<span class="keyword">unsigned</span> __int16)~(_WORD)v4 &amp; (<span class="keyword">unsigned</span> __int16)(v4 - <span class="number">0x101</span>) &amp; <span class="number">0x8080</span>) )</span><br><span class="line">    in = (<span class="keyword">unsigned</span> __int64 *)((<span class="keyword">char</span> *)in + <span class="number">2</span>);</span><br><span class="line">  v6 = (<span class="keyword">char</span> *)in - __CFADD__((_BYTE)v5, (_BYTE)v5) - <span class="number">3</span> - (<span class="keyword">char</span> *)&amp;str;</span><br><span class="line">  <span class="keyword">if</span> ( v6 &gt; <span class="number">0x10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"input is too long!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v6 == <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = change_into_number((<span class="keyword">unsigned</span> __int64)&amp;str, <span class="number">16</span>, &amp;ptr);<span class="comment">// 这个程序就是把输入的内容（十六进制）转换成了程序可读的数字</span></span><br><span class="line">    <span class="keyword">if</span> ( v7</span><br><span class="line">      &amp;&amp; (v8 = xtea_keychanged(ptr, v7, (__int64)&amp;unk_55883B7B0010, <span class="number">16</span>, &amp;v12), (v9 = (<span class="keyword">char</span> *)v8) != <span class="number">0L</span>L)</span><br><span class="line">      &amp;&amp; v12 &gt; <span class="number">0</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int16)crc16((__int64)v8, v12) == <span class="number">0x69E2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0L</span>L; v12 &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)i; ++i )</span><br><span class="line">        v9[i] ^= <span class="number">0x17</span>u;</span><br><span class="line">      <span class="built_in">puts</span>(v9);</span><br><span class="line">      <span class="keyword">if</span> ( ptr )</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">      <span class="built_in">free</span>(v9);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"input flag is wrong!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"input is too short!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输入后的字符串进行了一大堆看不懂的操作，但是能推测出来输入的长度为16位</p><p>用ida调试可知，change_into_number这个函数把输入的字符串进行了转换</p><p>完成了16进制字符串 -&gt; 16进制整数的过程</p><h3 id="xtea-keychanged中的一个子函数"><a href="#xtea-keychanged中的一个子函数" class="headerlink" title="xtea_keychanged中的一个子函数"></a>xtea_keychanged中的一个子函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_55883B5AECE0</span><span class="params">(<span class="keyword">int</span> *a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// er12</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// r13</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// er14</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// er15</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">int</span> *v13; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v17; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v18; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v19; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v22; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v25; <span class="comment">// er11</span></span><br><span class="line">  <span class="keyword">int</span> *v26; <span class="comment">// r13</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// er14</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v28; <span class="comment">// er12</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v29; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> *v30; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v32; <span class="comment">// er9</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v33; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v34; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v36; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v37; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v38; <span class="comment">// er15</span></span><br><span class="line">  <span class="keyword">int</span> *v39; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v40; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">int</span> v41; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">bool</span> v42; <span class="comment">// zf</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v43; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> *v44; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v45; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  v4 = a2;</span><br><span class="line">  v5 = *a1;</span><br><span class="line">  v43 = a2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = a2 - <span class="number">1</span>;</span><br><span class="line">    v7 = &amp;a1[a2 - <span class="number">1</span>];</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    v9 = *v7;</span><br><span class="line">    v10 = ((a2 - <span class="number">4</span>) &amp; <span class="number">0xFFFFFFFE</span>) + <span class="number">2</span>;</span><br><span class="line">    v45 = <span class="number">0x9E3779B9</span> * (<span class="number">52</span> / a2) - <span class="number">0x4AB325AA</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 -= <span class="number">0x61C88647</span>;</span><br><span class="line">      v11 = v8 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v43 &lt;= <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v14 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v12 = *a1;</span><br><span class="line">        v13 = a1;</span><br><span class="line">        v14 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v15 = v13[<span class="number">1</span>];</span><br><span class="line">          v13 += <span class="number">2</span>;</span><br><span class="line">          v16 = (v9 ^ *(_DWORD *)(v3 + <span class="number">4L</span>L * (((<span class="keyword">unsigned</span> __int8)v14 ^ (<span class="keyword">unsigned</span> __int8)v11) &amp; <span class="number">3</span>))) + (v15 ^ v8);</span><br><span class="line">          v17 = v14 + <span class="number">1</span>;</span><br><span class="line">          v14 += <span class="number">2</span>;</span><br><span class="line">          v18 = v12 + ((((v9 &gt;&gt; <span class="number">5</span>) ^ <span class="number">4</span> * v15) + ((v15 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v9)) ^ v16);</span><br><span class="line">          v12 = *v13;</span><br><span class="line">          *(v13 - <span class="number">2</span>) = v18;</span><br><span class="line">          v9 = v15</span><br><span class="line">             + (((<span class="number">4</span> * v12 ^ (v18 &gt;&gt; <span class="number">5</span>)) + (<span class="number">16</span> * v18 ^ (v12 &gt;&gt; <span class="number">3</span>))) ^ ((v12 ^ v8)</span><br><span class="line">                                                                    + (v18 ^ *(_DWORD *)(v3</span><br><span class="line">                                                                                       + <span class="number">4L</span>L</span><br><span class="line">                                                                                       * (((<span class="keyword">unsigned</span> __int8)v11 ^ v17) &amp; <span class="number">3</span>)))));</span><br><span class="line">          *(v13 - <span class="number">1</span>) = v9;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v10 != v14 );</span><br><span class="line">      &#125;</span><br><span class="line">      v19 = &amp;a1[v14];</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v20 = v19[<span class="number">1</span>];</span><br><span class="line">        v21 = v11 ^ v14++;</span><br><span class="line">        ++v19;</span><br><span class="line">        v22 = *(v19 - <span class="number">1</span>)</span><br><span class="line">            + (((v9 ^ *(_DWORD *)(v3 + <span class="number">4L</span>L * (v21 &amp; <span class="number">3</span>))) + (v20 ^ v8)) ^ ((<span class="number">16</span> * v9 ^ (v20 &gt;&gt; <span class="number">3</span>)) + ((v9 &gt;&gt; <span class="number">5</span>) ^ <span class="number">4</span> * v20)));</span><br><span class="line">        *(v19 - <span class="number">1</span>) = v22;</span><br><span class="line">        v9 = v22;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v6 &gt; v14 );</span><br><span class="line">      v9 = *v7</span><br><span class="line">         + (((v22 ^ *(_DWORD *)(v3 + <span class="number">4L</span>L * (((<span class="keyword">unsigned</span> __int8)v6 ^ (<span class="keyword">unsigned</span> __int8)v11) &amp; <span class="number">3</span>))) + (*a1 ^ v8)) ^ ((<span class="number">4</span> * *a1 ^ (v22 &gt;&gt; <span class="number">5</span>)) + (<span class="number">16</span> * v22 ^ ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)*a1 &gt;&gt; <span class="number">3</span>))));</span><br><span class="line">      *v7 = v9;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v8 != v45 );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">1L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt; <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v24 = -a2;</span><br><span class="line">    v25 = <span class="number">-1640531527</span> * (<span class="number">52</span> / v24 + <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v25 )</span><br><span class="line">    &#123;</span><br><span class="line">      v26 = &amp;a1[v24 - <span class="number">1</span>];</span><br><span class="line">      v27 = ~v4;</span><br><span class="line">      v44 = &amp;a1[~v4];</span><br><span class="line">      v28 = ~v4 - <span class="number">2</span> - ((~v4 - <span class="number">3</span>) &amp; <span class="number">0xFFFFFFFE</span>);</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v29 = v25 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v27 &lt;= <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v31 = v27;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v30 = v44;</span><br><span class="line">          v31 = v27;</span><br><span class="line">          v32 = *v44;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            v33 = *(v30 - <span class="number">1</span>);</span><br><span class="line">            v30 -= <span class="number">2</span>;</span><br><span class="line">            v34 = v32;</span><br><span class="line">            v32 = *v30;</span><br><span class="line">            v35 = ((v5 ^ v25) + (v33 ^ *(_DWORD *)(v3 + <span class="number">4L</span>L * (((<span class="keyword">unsigned</span> __int8)v31 ^ (<span class="keyword">unsigned</span> __int8)v29) &amp; <span class="number">3</span>)))) ^ ((<span class="number">4</span> * v5 ^ (v33 &gt;&gt; <span class="number">5</span>)) + ((v5 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v33));</span><br><span class="line">            v36 = v31 - <span class="number">1</span>;</span><br><span class="line">            v31 -= <span class="number">2</span>;</span><br><span class="line">            v37 = v34 - v35;</span><br><span class="line">            v38 = *v30;</span><br><span class="line">            v30[<span class="number">2</span>] = v37;</span><br><span class="line">            v5 = v33</span><br><span class="line">               - (((<span class="number">16</span> * v38 ^ (v37 &gt;&gt; <span class="number">3</span>)) + ((v32 &gt;&gt; <span class="number">5</span>) ^ <span class="number">4</span> * v37)) ^ ((v32 ^ *(_DWORD *)(v3</span><br><span class="line">                                                                                         + <span class="number">4L</span>L</span><br><span class="line">                                                                                         * (((<span class="keyword">unsigned</span> __int8)v29 ^ v36) &amp; <span class="number">3</span>)))</span><br><span class="line">                                                                      + (v25 ^ v37)));</span><br><span class="line">            v30[<span class="number">1</span>] = v5;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( v28 != v31 );</span><br><span class="line">        &#125;</span><br><span class="line">        v39 = &amp;a1[v31];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v40 = *(v39 - <span class="number">1</span>);</span><br><span class="line">          --v39;</span><br><span class="line">          v5 = v39[<span class="number">1</span>]</span><br><span class="line">             - (((v5 ^ v25) + (v40 ^ *(_DWORD *)(v3 + <span class="number">4L</span>L * (((<span class="keyword">unsigned</span> __int8)v29 ^ (<span class="keyword">unsigned</span> __int8)v31) &amp; <span class="number">3</span>)))) ^ (((v5 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v40) + ((v40 &gt;&gt; <span class="number">5</span>) ^ <span class="number">4</span> * v5)));</span><br><span class="line">          v39[<span class="number">1</span>] = v5;</span><br><span class="line">          --v31;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v31 );</span><br><span class="line">        v41 = *a1</span><br><span class="line">            - (((((<span class="keyword">unsigned</span> <span class="keyword">int</span>)*v26 &gt;&gt; <span class="number">5</span>) ^ <span class="number">4</span> * v5) + (<span class="number">16</span> * *v26 ^ (v5 &gt;&gt; <span class="number">3</span>))) ^ ((*(_DWORD *)(v3 + <span class="number">4L</span>L * (v29 &amp; <span class="number">3</span>)) ^ *v26)</span><br><span class="line">                                                                                 + (v25 ^ v5)));</span><br><span class="line">        v42 = v25 == <span class="number">-1640531527</span>;</span><br><span class="line">        v25 += <span class="number">1640531527</span>;</span><br><span class="line">        v5 = v41;</span><br><span class="line">        *a1 = v41;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( !v42 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由0x9E3779B9可知，这是一个xtea加密（解密）算法</p><p>然后加解密所使用的常数有所改变，是内存中的16字节的数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtea(v8, -(v10 &gt;&gt; <span class="number">2</span>), constant)</span><br></pre></td></tr></table></figure><blockquote><p>这个 -(v10 &gt;&gt; 2)明显是一个负数，而xtea函数为负时，就是解密的过程</p></blockquote><blockquote><p>在调试时xtea_keychanged这个函数执行完后就直接报wrong</p></blockquote><p>经高人指点，这个是xtea解密失败，程序判断这个密码解不出来，就直接报错了</p><h3 id="xtea-keychanged"><a href="#xtea-keychanged" class="headerlink" title="xtea_keychanged"></a>xtea_keychanged</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *__<span class="function">fastcall <span class="title">xtea_keychanged</span><span class="params">(<span class="keyword">void</span> *src, <span class="keyword">int</span> const_8, __int64 a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> *a5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// er12</span></span><br><span class="line">  __int64 constant; <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">int</span> *<span class="built_in">string</span>; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> *v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// er12</span></span><br><span class="line"></span><br><span class="line">  v5 = a5;</span><br><span class="line">  <span class="keyword">if</span> ( !src || (v6 = const_8, const_8 &lt;= <span class="number">0</span>) || (constant = a3) == <span class="number">0</span> || a4 != <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !a5 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">string</span> = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( a5 )</span><br><span class="line">  &#123;</span><br><span class="line">    *a5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !(const_8 &amp; <span class="number">3</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(const_8 + <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">string</span> = v9;</span><br><span class="line">      <span class="keyword">if</span> ( v9 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(v9, src, const_8);               <span class="comment">// v9 存储了输入的16进制数</span></span><br><span class="line">        v10 = const_8 + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt;= <span class="number">0</span> )</span><br><span class="line">          v10 = v6;</span><br><span class="line">        xtea(<span class="built_in">string</span>, -(v10 &gt;&gt; <span class="number">2</span>), constant);    <span class="comment">// xtea对输入的字符串进行解密</span></span><br><span class="line">        v11 = *((<span class="keyword">unsigned</span> __int8 *)<span class="built_in">string</span> + v6 - <span class="number">1</span>);<span class="comment">// 取第八个字符</span></span><br><span class="line">        *((_BYTE *)<span class="built_in">string</span> + v6) = <span class="number">0</span>;</span><br><span class="line">        *v5 = v6;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; v11 &amp;&amp; v11 &lt;= <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = v6 - v11;                       <span class="comment">// 8 - v11</span></span><br><span class="line">          *v5 = v13;</span><br><span class="line">          *((_BYTE *)<span class="built_in">string</span> + v13) = <span class="number">0</span>;         <span class="comment">// 把某一位置零了</span></span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">string</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    *v5 = <span class="number">0</span>;</span><br><span class="line">LABEL_14:</span><br><span class="line">    <span class="built_in">string</span> = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)<span class="built_in">string</span> + v13) = <span class="number">0</span>;         <span class="comment">// 把某一位置零了</span></span><br></pre></td></tr></table></figure><p>这句话很关键，把某一位截断了，而这一位只能是倒数第二位</p><h3 id="crc16"><a href="#crc16" class="headerlink" title="crc16"></a>crc16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_55883B5AF3D0</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// r12</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  __int16 v4; <span class="comment">// ax</span></span><br><span class="line">  __int16 v5; <span class="comment">// ax</span></span><br><span class="line">  __int16 v6; <span class="comment">// dx</span></span><br><span class="line">  __int16 v7; <span class="comment">// ax</span></span><br><span class="line">  __int16 v8; <span class="comment">// dx</span></span><br><span class="line">  __int16 v9; <span class="comment">// ax</span></span><br><span class="line">  __int16 v10; <span class="comment">// dx</span></span><br><span class="line">  __int16 v11; <span class="comment">// ax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v13; <span class="comment">// [rsp+5h] [rbp-23h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v14; <span class="comment">// [rsp+6h] [rbp-22h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v15; <span class="comment">// [rsp+8h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v15 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = a1;</span><br><span class="line">    v3 = a1 + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a2 - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v13 = *(_BYTE *)(++v2 - <span class="number">1</span>);</span><br><span class="line">        sub_55883B5AF270(&amp;v13, &amp;v13);</span><br><span class="line">        v4 = v14 ^ (v13 &lt;&lt; <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span> ( ((v14 ^ (v13 &lt;&lt; <span class="number">8</span>)) &amp; <span class="number">0x8000</span>u) != <span class="number">0</span> )</span><br><span class="line">          v5 = <span class="number">2</span> * v4 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          v5 = <span class="number">2</span> * v4;</span><br><span class="line">        v6 = <span class="number">2</span> * v5 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v5 &gt;= <span class="number">0</span> )</span><br><span class="line">          v6 = <span class="number">2</span> * v5;</span><br><span class="line">        v7 = <span class="number">2</span> * v6 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt;= <span class="number">0</span> )</span><br><span class="line">          v7 = <span class="number">2</span> * v6;</span><br><span class="line">        v8 = <span class="number">2</span> * v7 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v7 &gt;= <span class="number">0</span> )</span><br><span class="line">          v8 = <span class="number">2</span> * v7;</span><br><span class="line">        v9 = <span class="number">2</span> * v8 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v8 &gt;= <span class="number">0</span> )</span><br><span class="line">          v9 = <span class="number">2</span> * v8;</span><br><span class="line">        v10 = <span class="number">2</span> * v9 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v9 &gt;= <span class="number">0</span> )</span><br><span class="line">          v10 = <span class="number">2</span> * v9;</span><br><span class="line">        v11 = <span class="number">2</span> * v10 ^ <span class="number">0x1021</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v10 &gt;= <span class="number">0</span> )</span><br><span class="line">          v11 = <span class="number">2</span> * v10;</span><br><span class="line">        <span class="keyword">if</span> ( v11 &lt; <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v14 = <span class="number">2</span> * v11;</span><br><span class="line">        <span class="keyword">if</span> ( v2 == v3 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">      &#125;</span><br><span class="line">      v14 = <span class="number">2</span> * v11 ^ <span class="number">0x1021</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v2 != v3 );</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_19:</span><br><span class="line">  sub_55883B5AF2D0(&amp;v14, &amp;v14);</span><br><span class="line">  <span class="keyword">return</span> v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是通过0x1021可知，这是一个crc16校验，校验码为0x1021</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v2 == v3 )</span><br><span class="line">     <span class="keyword">goto</span> LABEL_19;</span><br></pre></td></tr></table></figure><p>由这句话可知，v2会从起始字节一直遍历到v3处，那么a2就要构造得刚好把这些值覆盖，可知a2=6，所以解密后的那个数组的最后一个字节就是2</p><p>调试tips:</p><blockquote><p> 有效的加密字符串 4290cd6dc6ae54cc</p><p>解密后得0123456789abcd02</p></blockquote><h3 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h3><ol><li>程序读入16位的十六进制数，并转化为8字节</li><li>将数据进行xtea解密</li></ol><blockquote><p>同时这个自带加密函数，只需要把输入的参数取反，就是逆过程了</p></blockquote><ol><li>将解密后的数据进行crc16校验（校验码为0x1021），得到结果<strong>0x69E2</strong></li><li>这个解密后的数组去异或0x17能得到”Bingo!” 字符串</li></ol><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crc16</span><span class="params">(data: bytes, poly=<span class="number">0x1021</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    CRC-16-CCITT Algorithm</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    data = bytearray(data)</span><br><span class="line">    crc = <span class="number">0xFFFF</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        cur_byte = <span class="number">0xFF</span> &amp; b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> (crc &amp; <span class="number">0x0001</span>) ^ (cur_byte &amp; <span class="number">0x0001</span>):</span><br><span class="line">                crc = (crc &gt;&gt; <span class="number">1</span>) ^ poly</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crc &gt;&gt;= <span class="number">1</span></span><br><span class="line">            cur_byte &gt;&gt;= <span class="number">1</span></span><br><span class="line">    crc = (~crc &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    crc = (crc &lt;&lt; <span class="number">8</span>) | ((crc &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> crc &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc = <span class="string">"Bingo!"</span></span><br><span class="line">dec = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    dec.append(hex(ord(i) ^ <span class="number">0x17</span>))</span><br><span class="line">dec.append(hex(<span class="number">6</span>))</span><br><span class="line">dec.append(hex(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(dec)</span><br></pre></td></tr></table></figure><blockquote><p>557e797078360602</p></blockquote><p>然后再拿这个字符串去加密一遍，就得到flag了</p><blockquote><p>rctf{2a2e71aab6168fb6}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">11</span>] Accepting connection <span class="keyword">from</span> <span class="number">192.168</span><span class="number">.133</span><span class="number">.1</span>...</span><br><span class="line">Input right flag you can got <span class="string">'Bingo!'</span> :<span class="number">2</span>a2e71aab6168fb6</span><br><span class="line"></span><br><span class="line">    Bingo!</span><br></pre></td></tr></table></figure><blockquote><p>后续：据说倒数第二字节是个padding</p><p>有空再填坑  <a href="https://blog.csdn.net/shift_wwx/article/details/84256774" target="_blank" rel="noopener">https://blog.csdn.net/shift_wwx/article/details/84256774</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="rctf-20190518" scheme="https://mrh1s.top/categories/write-up/rctf-20190518/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="xtea" scheme="https://mrh1s.top/tags/xtea/"/>
    
      <category term="crc16" scheme="https://mrh1s.top/tags/crc16/"/>
    
  </entry>
  
  <entry>
    <title>ccsp2019西南赛区</title>
    <link href="https://mrh1s.top/posts/74b676c7/"/>
    <id>https://mrh1s.top/posts/74b676c7/</id>
    <published>2019-05-18T16:29:53.000Z</published>
    <updated>2019-05-18T17:17:17.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CCSP2019"><a href="#CCSP2019" class="headerlink" title="CCSP2019"></a>CCSP2019</h1><blockquote><p> 有幸通过了CCF CSP  认证，获得了参加CCSP西南赛区比赛的资格</p></blockquote><p><strong>来到川大（江安校区）</strong></p><p>这个校区管理非常严格，进门之前甚至需要出示身份证和准考证( x</p><p>校园中一片宁静，可能是因为星期六的原因，并没有太多人愿意在这个搭好的天气出来走动走动，偶尔看见一两对情侣唧唧我我，酸死我了</p><p><img src="https://i.loli.net/2019/05/19/5ce039812509636998.jpg" alt="MVIMG_20190518_165030.jpg"></p><p>人文气息极其浓厚</p><p><img src="https://i.loli.net/2019/05/19/5ce03985947f538834.jpg" alt="MVIMG_20190518_162435.jpg"></p><p>这个比赛并不是很出名，整个教学楼就只看到两个指示牌，这是其中一个（</p><p><img src="https://i.loli.net/2019/05/19/5ce03984b835c99805.jpg" alt="MVIMG_20190518_080614.jpg"></p><p>CCSP分区赛是第一次在川大举办的，看出来主办方对于应急事件的处理方法还不够了解，试机过程中状况百出</p><p>8:30上机调试，没有提供windows的IDE，仅仅有一个linux虚拟机，配上里面“丰富”的IDE，不过我并不觉得这是一个好办法，因为川大的电脑实在是太垃圾了。。虚拟机真的是带不动啊</p><p>幸好我带了U盘，装上了Dev-Cpp</p><p>经过无数次重启，好不容易进去了比赛界面</p><p>OJ是清华大学提供的，这个非常好</p><p><img src="https://i.loli.net/2019/05/19/5ce039821f3f850433.jpg" alt="MVIMG_20190518_092009.jpg"></p><p>比赛期间还算进行得很顺利，不过嘛，菜是原罪</p><p>第一题是图论题，并不是什么高大上的题目，题目叙述非常简单，就是靠自己爆搜，剪枝吧</p><p>第二题模拟题，模拟raid5阵列恢复数据的过程</p><p>第三题是一道看不懂的与c++的类有关的题目，，，但是题目给的样例程序，交上去居然有分</p><p>中午12:30有午餐，是德克士的汉堡跟鸡腿，主办方在给选手提供良好比赛环境上还是下了很大功夫的</p><p>图片：颁奖现场</p><p><img src="https://i.loli.net/2019/05/19/5ce039814c74597275.jpg" alt="MVIMG_20190518_153959.jpg"></p><blockquote><p>水了个铜奖</p></blockquote><p>奖励是罗技鼠标一个</p><p><img src="https://i.loli.net/2019/05/19/5ce03982d7ed266471.jpg" alt="IMG_20190518_233712.jpg"></p><p>总结：这次川大之行非常愉快，一方面是见了见老同学聊了聊往事，另一方面我看到了川大在准备比赛上的用心和负责，虽然自己的水平还不够继续参加总决赛，不过这次区域赛无疑是一个很好的锻炼，期待以后的表现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="牢骚" scheme="https://mrh1s.top/categories/%E7%89%A2%E9%AA%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>single</title>
    <link href="https://mrh1s.top/posts/caa72719/"/>
    <id>https://mrh1s.top/posts/caa72719/</id>
    <published>2019-05-14T05:44:02.000Z</published>
    <updated>2019-05-21T07:55:13.929Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="single"><a href="#single" class="headerlink" title="single"></a>single</h1><p><a href="\uploads\single.7z">single</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p> 经观察 发现a1是一个矩阵</p></blockquote><h3 id="sub-400833"><a href="#sub-400833" class="headerlink" title="sub_400833"></a>sub_400833</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_400833</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> k; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">      ++s[*(<span class="keyword">unsigned</span> __int8 *)(<span class="number">9</span> * i + j + a1)];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">1</span>; k &lt;= <span class="number">9</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[k] != <span class="number">1</span> )</span><br><span class="line">        sub_4006F6();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将a1矩阵的<strong>每一行</strong>所指向的地址加1  最后s[1] - s[9] 全部等于1</p><p>​    </p><h3 id="sub-4008FE"><a href="#sub-4008FE" class="headerlink" title="sub_4008FE"></a>sub_4008FE</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_4008FE</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> k; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">      ++s[*(<span class="keyword">unsigned</span> __int8 *)(<span class="number">9</span> * j + i + a1)];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">1</span>; k &lt;= <span class="number">9</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[k] != <span class="number">1</span> )</span><br><span class="line">        sub_4006F6();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    将a1矩阵的<strong>每一列</strong>所指向的地址加1  最后s[1] - s[9] 全部等于1</p><blockquote><p>其实做完这一步的时候我就反应出来这道题可能是一个数独了，并且验证最后一个函数的功能，发现确实是一个数独</p></blockquote><h3 id="sub-4009C9"><a href="#sub-4009C9" class="headerlink" title="sub_4009C9"></a>sub_4009C9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_4009C9</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> l; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+24h] [rbp-2Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = <span class="number">3</span>;</span><br><span class="line">  v7 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">    <span class="keyword">for</span> ( j = v6 - <span class="number">3</span>; j &lt; v6; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( k = v7 - <span class="number">3</span>; k &lt; v7; ++k )</span><br><span class="line">        ++s[*(<span class="keyword">unsigned</span> __int8 *)(<span class="number">9</span> * j + k + a1)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( l = <span class="number">1</span>; l &lt;= <span class="number">9</span>; ++l )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[l] != <span class="number">1</span> )</span><br><span class="line">        sub_4006F6();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7 == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">3</span>;</span><br><span class="line">      v6 += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    将a1矩阵分为<strong>九个正方形的小块</strong>  最后s[1] - s[9] 全部等于1</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><blockquote><p>程序先读入一个81位长的字符串</p><p>并且通过c -= ‘0’ 来转化为数字</p></blockquote><p>如果数独的某个位置上面已经有数的话，就必须输入0</p><h4 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x602080</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">81</span>):</span><br><span class="line">    <span class="keyword">print</span> Byte(addr+i),<span class="string">","</span>,</span><br><span class="line">    <span class="keyword">if</span>((i+<span class="number">1</span>) % <span class="number">9</span> == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> , <span class="number">3</span> , <span class="number">0</span> , <span class="number">6</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , </span><br><span class="line"><span class="number">6</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">3</span> , <span class="number">2</span> , <span class="number">4</span> , <span class="number">9</span> , <span class="number">0</span> , </span><br><span class="line"><span class="number">0</span> , <span class="number">9</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">7</span> , <span class="number">0</span> , <span class="number">6</span> , <span class="number">0</span> , </span><br><span class="line"><span class="number">7</span> , <span class="number">4</span> , <span class="number">6</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , </span><br><span class="line"><span class="number">0</span> , <span class="number">1</span> , <span class="number">8</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">6</span> , <span class="number">3</span> , <span class="number">0</span> , </span><br><span class="line"><span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">4</span> , <span class="number">7</span> , </span><br><span class="line"><span class="number">0</span> , <span class="number">8</span> , <span class="number">0</span> , <span class="number">9</span> , <span class="number">0</span> , <span class="number">4</span> , <span class="number">0</span> , <span class="number">7</span> , <span class="number">0</span> , </span><br><span class="line"><span class="number">0</span> , <span class="number">7</span> , <span class="number">4</span> , <span class="number">2</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">6</span> , </span><br><span class="line"><span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">3</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">0</span> ,</span><br></pre></td></tr></table></figure><h4 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h4><p><a href="http://www.llang.net/sudoku/calsudoku.html" target="_blank" rel="noopener">http://www.llang.net/sudoku/calsudoku.html</a> 求解即可</p><p>401095728057800001802040305000321589500479002923586000105060203300008950269750804</p><p>加个flag</p><blockquote><p>flag{401095728057800001802040305000321589500479002923586000105060203300008950269750804}</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="cgctf" scheme="https://mrh1s.top/categories/write-up/cgctf/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
  </entry>
  
  <entry>
    <title>补题：Strange_int</title>
    <link href="https://mrh1s.top/posts/d2cf12e4/"/>
    <id>https://mrh1s.top/posts/d2cf12e4/</id>
    <published>2019-05-13T15:06:14.000Z</published>
    <updated>2019-05-21T07:54:20.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="strange-int"><a href="#strange-int" class="headerlink" title="strange int"></a>strange int</h1><p><a href="\uploads\strange_int.7z">strange_int</a></p><blockquote><p>打国赛的时候没做出来这道题，现在看了题解来补一补</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>以前写过FAT16的模拟程序，看到这个文件第一想法是这是一个DBR</p><p>第一行的 jmp 就是 jump 到这个命令的下一个命令。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">seg000:0000                 jmp     far ptr 7C0h:5</span><br><span class="line">seg000:0005 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:0005                 mov     ax, cs</span><br><span class="line">seg000:0007                 mov     ds, ax</span><br><span class="line">seg000:0009                 mov     ss, ax</span><br><span class="line">seg000:000B                 mov     sp, 400h</span><br><span class="line">seg000:000E                 cld</span><br><span class="line">seg000:000F                 mov     ax, 3</span><br><span class="line">seg000:0012                 int     10h             ; - VIDEO - SET VIDEO MODE</span><br><span class="line">seg000:0012                                         ; AL = mode</span><br><span class="line">seg000:0014                 mov     dx, 0</span><br><span class="line">seg000:0017                 mov     cx, 2</span><br><span class="line">seg000:001A                 mov     ax, 1000h</span><br><span class="line">seg000:001D                 mov     es, ax</span><br><span class="line">seg000:001F                 assume es:nothing</span><br><span class="line">seg000:001F                 xor     bx, bx</span><br><span class="line">seg000:0021                 mov     ax, 228h</span><br><span class="line">seg000:0024                 int     13h             ; DISK - READ SECTORS INTO MEMORY</span><br><span class="line">seg000:0024                                         ; AL = number of sectors to read, CH = track, CL = sector</span><br><span class="line">seg000:0024                                         ; DH = head, DL = drive, ES:BX -&gt; buffer to fill</span><br><span class="line">seg000:0024                                         ; Return: CF set on error, AH = status, AL = number of sectors read</span><br><span class="line">seg000:0026                 jnb     short loc_2A</span><br><span class="line">seg000:0028</span><br><span class="line">seg000:0028 loc_28:                                 ; CODE XREF: seg000:loc_28↓j</span><br><span class="line">seg000:0028                 jmp     short loc_28</span><br><span class="line">seg000:002A ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:002A</span><br><span class="line">seg000:002A loc_2A:                                 ; CODE XREF: seg000:0026↑j</span><br><span class="line">seg000:002A                 cli</span><br><span class="line">seg000:002B                 mov     ax, 1000h</span><br><span class="line">seg000:002E                 mov     ds, ax</span><br><span class="line">seg000:0030                 assume ds:nothing</span><br><span class="line">seg000:0030                 xor     ax, ax</span><br><span class="line">seg000:0032                 mov     es, ax</span><br><span class="line">seg000:0034                 assume es:nothing</span><br><span class="line">seg000:0034                 mov     cx, 2000h</span><br><span class="line">seg000:0037                 sub     si, si</span><br><span class="line">seg000:0039                 sub     di, di</span><br><span class="line">seg000:003B                 rep movsb</span><br><span class="line">seg000:003D                 mov     ax, 7C0h</span><br><span class="line">seg000:0040</span><br><span class="line">seg000:0040 loc_40:                                 ; DATA XREF: seg000:0012↑r</span><br><span class="line">seg000:0040                 mov     ds, ax</span><br><span class="line">seg000:0042                 assume ds:nothing</span><br><span class="line">seg000:0042                 lidt    fword ptr ds:6Fh</span><br><span class="line">seg000:0047                 lgdt    fword ptr ds:75h</span><br><span class="line">seg000:004C</span><br><span class="line">seg000:004C loc_4C:                                 ; DATA XREF: seg000:0024↑r</span><br><span class="line">seg000:004C                 mov     ax, 1</span><br><span class="line">seg000:004F                 lmsw    ax</span><br><span class="line">seg000:0052                 jmp     far ptr 8:0</span><br></pre></td></tr></table></figure><p>然后就跳转到一个神秘的鬼地方去了</p><p>程序大概是把ebx置0了，然后作为计数变量，一共循环了10h次</p><p>把一堆数送到了内存中，经高人指点，这堆数属于中断向量</p><p>（也就是VM里面的操作数，对应相应的操作）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">seg000:000001FE ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:000001FE                 push    ebp</span><br><span class="line">seg000:000001FF                 stosb</span><br><span class="line">seg000:00000200                 mov     eax, 10h</span><br><span class="line">seg000:00000205                 mov     ds, eax</span><br><span class="line">seg000:00000207                 assume ds:nothing</span><br><span class="line">seg000:00000207                 lss     esp, large ds:0B5Ch</span><br><span class="line">seg000:0000020E                 call    sub_28B</span><br><span class="line">seg000:00000213                 call    sub_283</span><br><span class="line">seg000:00000218                 mov     eax, 10h        ; DATA XREF: sub_28B+27↓r</span><br><span class="line">seg000:0000021D                 mov     ds, eax</span><br><span class="line">seg000:0000021F                 mov     es, eax</span><br><span class="line">seg000:00000221                 assume es:nothing</span><br><span class="line">seg000:00000221                 mov     fs, eax         ; DATA XREF: sub_283↓r</span><br><span class="line">seg000:00000223                 assume fs:nothing</span><br><span class="line">seg000:00000223                 mov     gs, eax</span><br><span class="line">seg000:00000225                 assume gs:nothing</span><br><span class="line">seg000:00000225</span><br><span class="line">seg000:00000225 loc_225:                                ; DATA XREF: sub_28B+11↓o</span><br><span class="line">seg000:00000225                 lss     esp, large ds:0B5Ch</span><br><span class="line">seg000:0000022C                 xor     ebx, ebx</span><br><span class="line">seg000:0000022E</span><br><span class="line">seg000:0000022E loc_22E:                                ; CODE XREF: seg000:0000025D↓j</span><br><span class="line">seg000:0000022E                 nop</span><br><span class="line">seg000:0000022F                 cmp     ebx, 10h</span><br><span class="line">seg000:00000232                 jge     short loc_25F</span><br><span class="line"></span><br><span class="line">seg000:00000234                 mov     eax, 80000h</span><br><span class="line">seg000:00000239                 lea     edx, ds:0D08h[ebx*4] ;这个内存里面全部存的0</span><br><span class="line">seg000:00000240                 mov     edx, [edx]</span><br><span class="line">seg000:00000242                 mov     ax, dx</span><br><span class="line">seg000:00000245                 mov     dx, 8E00h</span><br><span class="line">seg000:00000249                 mov     ecx, 21h ; &apos;!&apos; ;21h</span><br><span class="line">seg000:0000024E                 add     ecx, ebx    ;21h + ebx， </span><br><span class="line">;也就是把21h开始的10h个数作为操作数</span><br><span class="line">seg000:00000250                 lea     esi, ds:128h[ecx*8]</span><br><span class="line">seg000:00000257                 mov     [esi], eax</span><br><span class="line">seg000:00000259                 mov     [esi+4], edx</span><br><span class="line">seg000:0000025C                 inc     ebx</span><br><span class="line">seg000:0000025D                 jmp     short loc_22E</span><br><span class="line">seg000:0000025F ; ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 后面是多次中断进行操作</span><br><span class="line">seg000:0000025F</span><br><span class="line">seg000:0000025F loc_25F:                                ; CODE XREF: seg000:00000232↑j</span><br><span class="line">seg000:0000025F                                         ; seg000:00000266↓j</span><br><span class="line">seg000:0000025F                 call    sub_268</span><br><span class="line">seg000:00000264                 int     21h             ; DOS -</span><br><span class="line">seg000:00000266                 jmp     short loc_25F</span><br></pre></td></tr></table></figure><h3 id="switch跳转语句"><a href="#switch跳转语句" class="headerlink" title="switch跳转语句"></a>switch跳转语句</h3><p>中断之前call的sub_268汇编代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seg000:00000268 sub_268         proc near               ; CODE XREF: seg000:loc_25F↑p</span><br><span class="line">seg000:00000268                 mov     edi, large ds:0B78h</span><br><span class="line">seg000:0000026E                 lea     edi, ds:0D48h[edi*4]</span><br><span class="line">seg000:00000275                 mov     eax, [edi]</span><br><span class="line">seg000:00000277                 mov     large ds:65h, al</span><br><span class="line">seg000:0000027C                 mov     ecx, [edi+4]</span><br><span class="line">seg000:0000027F                 mov     eax, [edi+8]</span><br><span class="line">seg000:00000282                 retn</span><br><span class="line">seg000:00000282 sub_268         endp</span><br></pre></td></tr></table></figure><p>操作数1被送入内存了</p><p>ecx应该是操作数2</p><p>eax是操作数3</p><h3 id="各个case"><a href="#各个case" class="headerlink" title="各个case"></a>各个case</h3><h4 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h4><p>以下是每个操作数对应的操作， 因为所有的操作数是依次出现的 ，所以只需要挨着翻译就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">seg000:00000D7C ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000D7C                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000D83                 mov     [ecx], eax</span><br><span class="line">seg000:00000D85                 jmp     loc_EF8</span><br><span class="line">seg000:00000D8A ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000D8A                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000D91                 mov     eax, [eax]</span><br><span class="line">seg000:00000D93                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000D9A                 mov     [ecx], eax</span><br><span class="line">seg000:00000D9C                 jmp     loc_EF8</span><br><span class="line">seg000:00000DA1 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000DA1                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000DA8                 mov     eax, [eax]</span><br><span class="line">seg000:00000DAA                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000DB1                 lea     eax, ds:0D48h[eax*4]</span><br><span class="line">seg000:00000DB8                 mov     eax, [eax]</span><br><span class="line">seg000:00000DBA                 mov     [ecx], eax</span><br><span class="line">seg000:00000DBC                 jmp     loc_EF8</span><br><span class="line">seg000:00000DC1 ; ---------------------------------------------------------------------------seg000:00000DC1                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000DC8                 mov     eax, [eax]</span><br><span class="line">seg000:00000DCA                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000DD1                 mov     ecx, [ecx]</span><br><span class="line">seg000:00000DD3                 lea     ecx, ds:0D48h[ecx*4]</span><br><span class="line">seg000:00000DDA                 mov     [ecx], eax</span><br><span class="line">seg000:00000DDC                 jmp     loc_EF8</span><br><span class="line">seg000:00000DE1 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000DE1                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000DE8                 mov     edx, [eax]</span><br><span class="line">seg000:00000DEA                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000DF1                 mov     eax, [ecx]</span><br><span class="line">seg000:00000DF3                 add     eax, edx</span><br><span class="line">seg000:00000DF5                 mov     [ecx], eax</span><br><span class="line">seg000:00000DF7                 jmp     loc_EF8</span><br><span class="line">seg000:00000DFC ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000DFC                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000E03                 mov     edx, [eax]</span><br><span class="line">seg000:00000E05                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000E0C                 mov     eax, [ecx]</span><br><span class="line">seg000:00000E0E                 sub     eax, edx</span><br><span class="line">seg000:00000E10                 mov     [ecx], eax</span><br><span class="line">seg000:00000E12                 jmp     loc_EF8</span><br><span class="line">seg000:00000E17 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000E17                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000E1E                 mov     edx, [eax]</span><br><span class="line">seg000:00000E20                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000E27                 mov     eax, [ecx]</span><br><span class="line">seg000:00000E29                 xor     eax, edx</span><br><span class="line">seg000:00000E2B                 mov     [ecx], eax</span><br><span class="line">seg000:00000E2D                 jmp     loc_EF8</span><br><span class="line">seg000:00000E32 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000E32                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000E39                 mov     eax, [eax]</span><br><span class="line">seg000:00000E3B                 lea     edx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000E42                 mov     cl, al</span><br><span class="line">seg000:00000E44                 mov     eax, [edx]</span><br><span class="line">seg000:00000E46                 shl     eax, cl</span><br><span class="line">seg000:00000E48                 mov     [edx], eax</span><br><span class="line">seg000:00000E4A                 jmp     loc_EF8</span><br><span class="line">seg000:00000E4F ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000E4F                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000E56                 mov     eax, [eax]</span><br><span class="line">seg000:00000E58                 lea     edx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000E5F                 mov     cl, al</span><br><span class="line">seg000:00000E61                 mov     eax, [edx]</span><br><span class="line">seg000:00000E63                 shr     eax, cl</span><br><span class="line">seg000:00000E65                 mov     [edx], eax</span><br><span class="line">seg000:00000E67                 jmp     loc_EF8</span><br><span class="line">seg000:00000E6C ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000E6C                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000E73                 mov     eax, [eax]</span><br><span class="line">seg000:00000E75                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000E7C                 mov     edx, [ecx]</span><br><span class="line">seg000:00000E7E                 and     eax, edx</span><br><span class="line">seg000:00000E80                 mov     [ecx], eax</span><br><span class="line">seg000:00000E82                 jmp     short loc_EF8</span><br><span class="line">seg000:00000E84 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000E84                 lea     eax, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000E8B                 mov     eax, [eax]</span><br><span class="line">seg000:00000E8D                 lea     ecx, unk_B78</span><br><span class="line">seg000:00000E93                 mov     [ecx], eax</span><br><span class="line">seg000:00000E95                 iret</span><br><span class="line">seg000:00000E96 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000E96                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000E9D                 mov     eax, [eax]</span><br><span class="line">seg000:00000E9F                 test    eax, eax</span><br><span class="line">seg000:00000EA1                 jnz     short loc_EF8</span><br><span class="line">seg000:00000EA3                 lea     eax, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000EAA                 mov     eax, [eax]</span><br><span class="line">seg000:00000EAC                 lea     ecx, unk_B78</span><br><span class="line">seg000:00000EB2                 mov     [ecx], eax</span><br><span class="line">seg000:00000EB4                 iret</span><br><span class="line">seg000:00000EB5 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000EB5                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg000:00000EBC                 mov     eax, [eax]</span><br><span class="line">seg000:00000EBE                 test    eax, eax</span><br><span class="line">seg000:00000EC0                 jz      short loc_EF8</span><br><span class="line">seg000:00000EC2                 lea     eax, ds:0B64h[ecx*4]</span><br><span class="line">seg000:00000EC9                 mov     eax, [eax]</span><br><span class="line">seg000:00000ECB                 lea     ecx, unk_B78</span><br><span class="line">seg000:00000ED1                 mov     [ecx], eax</span><br><span class="line">seg000:00000ED3                 iret</span><br><span class="line">seg000:00000ED4 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000ED4                 lea     eax, unk_F94</span><br><span class="line">seg000:00000EDA                 call    sub_2EA</span><br><span class="line">seg000:00000EDF                 hlt</span><br><span class="line">seg000:00000EE0 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000EE0                 lea     eax, unk_FA0</span><br><span class="line">seg000:00000EE6                 call    sub_2EA</span><br><span class="line">seg000:00000EEB                 lea     eax, word_FAE</span><br><span class="line">seg000:00000EF1                 call    sub_2EA</span><br><span class="line">seg000:00000EF6                 hlt</span><br><span class="line">seg000:00000EF6 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000EF7                 db 0F4h</span><br><span class="line">seg000:00000EF8 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:00000EF8</span><br><span class="line">seg000:00000EF8 loc_EF8:                                ; CODE XREF: seg000:00000D85↑j</span><br><span class="line">seg000:00000EF8                                         ; seg000:00000D9C↑j ...</span><br><span class="line">seg000:00000EF8                 lea     ecx, unk_B78</span><br><span class="line">seg000:00000EFE                 mov     eax, [ecx]</span><br><span class="line">seg000:00000F00                 add     eax, 3</span><br><span class="line">seg000:00000F03                 mov     [ecx], eax</span><br><span class="line">seg000:00000F05                 iret</span><br><span class="line">seg000:00000F05 ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="翻译后"><a href="#翻译后" class="headerlink" title="翻译后"></a>翻译后</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">buf[a] = b</span><br><span class="line">buf[a] = buf[b]</span><br><span class="line">buf[a] = (dword) opt[buf[b]]</span><br><span class="line">(dword) opt[buf[a]] = buf[b]</span><br><span class="line">buf[a] += buf[b]</span><br><span class="line">buf[a] -= buf[b]</span><br><span class="line">buf[a] ^= buf[b]</span><br><span class="line">buf[a] &lt;&lt;= buf[b]</span><br><span class="line">buf[a] &gt;&gt;= buf[b]</span><br><span class="line">buf[a] &amp;= buf[b]</span><br><span class="line">temp = buf[a]</span><br><span class="line"><span class="keyword">if</span>(buf[b] == <span class="number">0</span>)  temp = buf[a]</span><br><span class="line"><span class="keyword">if</span>(buf[b] != <span class="number">0</span>)  temp = buf[a]</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong"</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"right"</span>)</span><br></pre></td></tr></table></figure><h3 id="指令数组"><a href="#指令数组" class="headerlink" title="指令数组"></a>指令数组</h3><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>数据区，存储操作数，这个是通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seg000:0000026E                 lea     edi, ds:0D48h[edi*4]</span><br></pre></td></tr></table></figure><p>算出来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">seg000:00000F48                 db  21h ; !             ; data start</span><br><span class="line">seg000:00000F49                 db    0</span><br><span class="line">seg000:00000F4A                 db    0</span><br><span class="line">seg000:00000F4B                 db    0</span><br><span class="line">seg000:00000F4C                 db    0</span><br><span class="line">seg000:00000F4D                 db    0</span><br><span class="line">seg000:00000F4E                 db    0</span><br><span class="line">seg000:00000F4F                 db    0</span><br><span class="line">seg000:00000F50                 db  81h</span><br><span class="line">seg000:00000F51                 db    0</span><br><span class="line">seg000:00000F52                 db    0</span><br><span class="line">seg000:00000F53                 db    0</span><br><span class="line">seg000:00000F54                 db  27h ; &apos;</span><br><span class="line">seg000:00000F55                 db    0</span><br><span class="line">seg000:00000F56                 db    0</span><br><span class="line">seg000:00000F57                 db    0</span><br><span class="line">seg000:00000F58                 dd 2 dup(1), 24h, 2 dup(1), 23h, 2, 0</span><br><span class="line">seg000:00000F78                 db  22h ; &quot;</span><br><span class="line">seg000:00000F79                 align 4</span><br><span class="line">seg000:00000F7C                 db    3</span><br><span class="line">seg000:00000F7D                 align 10h</span><br><span class="line">seg000:00000F80                 db    2</span><br><span class="line">seg000:00000F81                 align 4</span><br><span class="line">seg000:00000F84                 dd offset dword_0+21h</span><br><span class="line">seg000:00000F88                 dd 4, 8, 28h</span><br><span class="line">seg000:00000F94 unk_F94         db    3                 ; DATA XREF: seg000:00000ED4↑o</span><br><span class="line">seg000:00000F95                 align 4</span><br><span class="line">seg000:00000F98                 dd 4, 27h</span><br><span class="line">seg000:00000FA0 unk_FA0         db    2                 ; DATA XREF: seg000:00000EE0↑o</span><br><span class="line">seg000:00000FA1                 align 4</span><br><span class="line">seg000:00000FA4                 db    3</span><br><span class="line">seg000:00000FA5                 align 4</span><br><span class="line">seg000:00000FA8                 dd offset dword_0+28h</span><br><span class="line">seg000:00000FAC                 db    3</span><br><span class="line">seg000:00000FAD                 align 2</span><br><span class="line">seg000:00000FAE word_FAE        dw 0                    ; DATA XREF: seg000:00000EEB↑o</span><br><span class="line">seg000:00000FB0                 dd 4, 27h, 2, 3, 28h, 3, 4, 27h, 2, 3, 27h, 2 dup(3), 23h</span><br><span class="line">seg000:00000FB0                 dd 4, 3, 24h, 3, 2, 27h, 2, 4, 24h, 0</span><br><span class="line">seg000:00001010                 db    2</span><br><span class="line">seg000:00001011                 align 4</span><br><span class="line">seg000:00001014                 dd offset dword_0+21h</span><br><span class="line">seg000:00001018                 dd 2 dup(1), 25h, 0</span><br><span class="line">seg000:00001028                 dd 1, 22h, 1, 0</span><br><span class="line">seg000:00001038                 dd offset dword_0+21h</span><br><span class="line">seg000:0000103C                 db    2</span><br><span class="line">seg000:0000103D                 align 10h</span><br><span class="line">seg000:00001040                 db  81h</span><br><span class="line">seg000:00001041                 align 4</span><br><span class="line">seg000:00001044                 dd offset dword_0+26h</span><br><span class="line">seg000:00001048                 dd 1, 2, 21h, 2, 9, 26h, 1, 2, 21h, 2, 9, 2Dh, 2, 1, 21h</span><br><span class="line">seg000:00001048                 dd 0</span><br><span class="line">seg000:00001088                 db  81h</span><br><span class="line">seg000:00001089                 align 4</span><br><span class="line">seg000:0000108C                 db  22h ; &quot;</span><br><span class="line">seg000:0000108D                 align 10h</span><br><span class="line">seg000:00001090                 dd 1, 0</span><br><span class="line">seg000:00001098                 dd offset dword_0+21h</span><br><span class="line">seg000:0000109C                 db    2</span><br><span class="line">seg000:0000109D                 align 10h</span><br><span class="line">seg000:000010A0                 dd 9, 25h, 1, 2, 23h, 3, 0</span><br><span class="line">seg000:000010BC                 db  23h ; #</span><br><span class="line">seg000:000010BD                 align 10h</span><br><span class="line">seg000:000010C0                 dd 4, 1, 26h, 3, 4, 21h, 4, 7Eh, 2Dh, 4, 3, 21h, 3, 1</span><br><span class="line">seg000:000010C0                 dd 25h, 0</span><br><span class="line">seg000:00001100                 db    3</span><br><span class="line">seg000:00001101                 align 4</span><br><span class="line">seg000:00001104                 db  25h ; %</span><br><span class="line">seg000:00001105                 align 4</span><br><span class="line">seg000:00001108                 dd 1, 3, 26h, 2, 3, 21h, 4, 5Ah, 2Dh, 4, 2, 2Fh, 2 dup(0)</span><br><span class="line">seg000:00001140                 dd offset dword_0+30h</span><br><span class="line">seg000:00001144                 dd 2 dup(0)</span><br><span class="line">seg000:0000114C                 db  38h ; 8</span><br><span class="line">seg000:0000114D                 db 62h, 64h, 61h</span><br></pre></td></tr></table></figure><h4 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x0F48</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nopt:"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    opt = Dword(addr)</span><br><span class="line">    a = Dword(addr + <span class="number">4</span>)</span><br><span class="line">    b = Dword(addr + <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">print</span> opt,<span class="string">","</span>,a,<span class="string">","</span>,b,<span class="string">","</span>,</span><br><span class="line">    <span class="keyword">if</span>(opt &gt;= <span class="number">0x2E</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    addr += <span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><p>妈耶，好不容易把指令翻译成了C语言，结果发现这段代码里面还嵌套了类似汇编的指令，还有循环，需要翻译</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>       buf0 = <span class="number">129</span>    <span class="comment">//buf0 = 129</span></span><br><span class="line"><span class="number">1</span>       buf1 ^= buf1   <span class="comment">//buf1 = 0</span></span><br><span class="line"><span class="number">2</span>       (dword) data[buf1] = buf1   <span class="comment">//data[0] = 0</span></span><br><span class="line"><span class="number">3</span>       buf2 = (dword) data[buf0]   <span class="comment">//buf2 = data[129]</span></span><br><span class="line"><span class="number">4</span>       buf3 = buf2                 <span class="comment">//buf3 = data[129]</span></span><br><span class="line"><span class="number">5</span>       buf4 = <span class="number">8</span>    <span class="comment">//buf4 = 8</span></span><br><span class="line"><span class="number">6</span>       buf3 &lt;&lt;= buf4               <span class="comment">//buf3 = data[129] &lt;&lt; 8</span></span><br><span class="line"><span class="number">7</span>       buf2 ^= buf3    <span class="comment">//buf2 = data[129] ^ (data[129] &lt;&lt; 8)</span></span><br><span class="line"><span class="number">8</span>       buf3 &lt;&lt;= buf4        <span class="comment">//buf3 = data[129] &lt;&lt; 16</span></span><br><span class="line"><span class="number">9</span>       buf2 ^= buf3 </span><br><span class="line"><span class="number">10</span>      buf3 &lt;&lt;= buf4</span><br><span class="line"><span class="number">11</span>      buf2 ^= buf3</span><br><span class="line"></span><br><span class="line"><span class="comment">//buf2 = data[129] ^ (data[129] &lt;&lt; 8) ^ (data[129] &lt;&lt; 16) ^ (data[129] &lt;&lt; 24) </span></span><br><span class="line"><span class="comment">//  = afterXor</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span>      buf3 ^= buf3    <span class="comment">//buf3 = 0</span></span><br><span class="line"><span class="number">13</span>      buf4 = (dword) data[buf3]   <span class="comment">//buf4 = data[0]</span></span><br><span class="line"><span class="number">14</span>      (dword) data[buf3] = buf2   <span class="comment">//data[0] = afterXor</span></span><br><span class="line"><span class="number">15</span>      buf2 ^= buf4                <span class="comment">//buf2 = afterXor ^ data[0]</span></span><br><span class="line"><span class="number">16</span>      (dword) data[buf0] = buf2   <span class="comment">//data[129] = afterXor ^ data[0]</span></span><br><span class="line"><span class="number">17</span>      buf1 = <span class="number">1</span><span class="comment">//buf1 = 1</span></span><br><span class="line"><span class="number">18</span>      buf0 += buf1<span class="comment">//buf0 = 130</span></span><br><span class="line"><span class="number">19</span>      buf1 = buf0<span class="comment">//buf1 = 130</span></span><br><span class="line"><span class="number">20</span>      buf2 = <span class="number">129</span><span class="comment">//buf2 = 129</span></span><br><span class="line"><span class="number">21</span>      buf1 -= buf2<span class="comment">//buf1 = 1</span></span><br><span class="line"><span class="number">22</span>      buf2 = <span class="number">9</span><span class="comment">//buf2 = 9</span></span><br><span class="line"><span class="number">23</span>      buf1 -= buf2<span class="comment">//buf1 = -8</span></span><br><span class="line"><span class="number">24</span>      buf2 = <span class="number">9</span><span class="comment">//buf2 = 9</span></span><br><span class="line"></span><br><span class="line"><span class="number">25</span>      <span class="keyword">if</span>(buf1 != <span class="number">0</span>)  temp = buf2  <span class="comment">//经高人指点，这里是设置eip</span></span><br><span class="line"><span class="comment">//jmp 3</span></span><br><span class="line"></span><br><span class="line"><span class="number">26</span>      buf0 = <span class="number">129</span><span class="comment">//buf0 = 129</span></span><br><span class="line"><span class="number">27</span>      buf1 = buf0<span class="comment">//buf1 = 129</span></span><br><span class="line"><span class="number">28</span>      buf2 = <span class="number">9</span><span class="comment">//buf2 = 9</span></span><br><span class="line"><span class="number">29</span>      buf1 += buf2<span class="comment">//buf1 = 138</span></span><br><span class="line"><span class="number">30</span>      buf3 = (dword) data[buf0]<span class="comment">//buf3 = data[129]</span></span><br><span class="line"><span class="number">31</span>      buf4 = (dword) data[buf1]<span class="comment">//buf4 = data[138]</span></span><br><span class="line"><span class="number">32</span>      buf3 -= buf4<span class="comment">//buf3 = data[129] - data[138]</span></span><br><span class="line"><span class="number">33</span>      buf4 = <span class="number">126</span><span class="comment">//buf4 = 126</span></span><br><span class="line"></span><br><span class="line"><span class="number">34</span>      <span class="keyword">if</span>(buf3 != <span class="number">0</span>)  temp = buf4<span class="comment">//jmp 42</span></span><br><span class="line"></span><br><span class="line"><span class="number">35</span>      buf3 = <span class="number">1</span><span class="comment">//buf3 = 1</span></span><br><span class="line"><span class="number">36</span>      buf0 += buf3<span class="comment">//buf0 = data[129] - data[138] + 129</span></span><br><span class="line"><span class="number">37</span>      buf1 += buf3<span class="comment">//buf1 = 139</span></span><br><span class="line"><span class="number">38</span>      buf2 -= buf3<span class="comment">//buf2 = 8</span></span><br><span class="line"><span class="number">39</span>      buf4 = <span class="number">90</span><span class="comment">//buf4 = 90</span></span><br><span class="line"><span class="number">40</span>      <span class="keyword">if</span>(buf2 != <span class="number">0</span>)  temp = buf4</span><br><span class="line"><span class="number">41</span>      <span class="built_in">printf</span>(<span class="string">"wrong"</span>)</span><br><span class="line"><span class="number">42</span>      <span class="built_in">printf</span>(<span class="string">"right"</span>)</span><br></pre></td></tr></table></figure><h4 id="再翻译"><a href="#再翻译" class="headerlink" title="再翻译"></a>再翻译</h4><p>程序作了一个很奇怪的循环，并且异或了一大堆</p><p>这个程序要逆向实在太难了，考虑到本来这个数据也不大，就暴力枚举</p><p><strong>script from yypE:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(len(arr)==<span class="number">9</span>)</span><br><span class="line">    last = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">        var = <span class="number">0</span></span><br><span class="line">        arr[i] ^= last</span><br><span class="line">        last = arr[i]</span><br><span class="line">        var |= arr[i] &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">            var |= (byte(arr[i],j) ^ byte(arr[i],j<span class="number">-1</span>)) &lt;&lt;(<span class="number">8</span>*j)</span><br><span class="line">        arr[i] = var</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(len(arr)==<span class="number">9</span>)</span><br><span class="line">    last = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">        var = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            var ^= (arr[i]&lt;&lt;(<span class="number">8</span>*j)) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        arr[i] = var ^ last</span><br><span class="line">        last = var</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p>获得flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_flag</span><span class="params">()</span>:</span></span><br><span class="line">    ar = [<span class="number">1466127717</span>, <span class="number">106103809</span>, <span class="number">524896585</span>, <span class="number">1364657951</span>, <span class="number">1465860951</span>, <span class="number">1464032855</span>, <span class="number">1129775626</span>, <span class="number">1465779038</span>, <span class="number">257490944</span>]</span><br><span class="line">    flag = <span class="string">b''</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> dec(ar):</span><br><span class="line">        flag+=each.to_bytes(<span class="number">4</span>,<span class="string">'little'</span>)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p><strong>虚拟机+反汇编+循环+暴力搜索</strong></p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ol><li>猜出来程序的入口点</li><li>猜出修改的temp变量原来是EIP</li><li>逆向带循环的程序</li><li>耐心</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="nationalCTF_20190421" scheme="https://mrh1s.top/categories/write-up/nationalCTF-20190421/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="VM" scheme="https://mrh1s.top/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>simple_machine</title>
    <link href="https://mrh1s.top/posts/5f4cc17f/"/>
    <id>https://mrh1s.top/posts/5f4cc17f/</id>
    <published>2019-05-11T12:45:32.000Z</published>
    <updated>2019-05-21T07:53:38.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="simple-machine"><a href="#simple-machine" class="headerlink" title="simple-machine"></a>simple-machine</h1><p><a href="\uploads\simple-machine.7z">simple-machine</a></p><h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><h3 id="general"><a href="#general" class="headerlink" title="general"></a>general</h3><p>这道题说起来是vm，实际上和vm的挂钩并不大，就是用高级语言去实现了汇编，把变量都当做了寄存器来使用，其中还有各种压栈出栈过程，不过跟本题关系不大，也就不用过于细究了</p><h3 id="fun1"><a href="#fun1" class="headerlink" title="fun1"></a>fun1</h3><p>fun1主要是通过输入的字符串，与预置的feed进行异或，得到一串加密的字符串，存在内存中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> str, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  push(base_addr_804B15C);</span><br><span class="line">  base_addr_804B15C = esp1;</span><br><span class="line">  push(temp);</span><br><span class="line">  push(temp2);</span><br><span class="line">  esp1 -= <span class="number">48</span>;</span><br><span class="line">  *(_DWORD *)(base_addr_804B15C - 29) = 'deef'; // 0x804B13F</span><br><span class="line">  *(_DWORD *)(base_addr_804B15C - 25) = 'daed';</span><br><span class="line">  *(_DWORD *)(base_addr_804B15C - 21) = 'feeb';</span><br><span class="line">  *(_DWORD *)(base_addr_804B15C - 17) = 'efac';</span><br><span class="line">  *(_BYTE *)(base_addr_804B15C - <span class="number">13</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( *(_DWORD *)(base_addr_804B15C - <span class="number">12</span>) = <span class="number">0</span>; ; ++*(_DWORD *)(base_addr_804B15C - <span class="number">12</span>) )<span class="comment">// i = base_addr_804B15C - 12</span></span><br><span class="line">  &#123;</span><br><span class="line">    eaxx = *(_DWORD *)(base_addr_804B15C - <span class="number">12</span>); <span class="comment">// i</span></span><br><span class="line">    <span class="keyword">if</span> ( eaxx &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;                                    <span class="comment">// 判断是否退出循环</span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">    ebxx = *(_DWORD *)(base_addr_804B15C - <span class="number">12</span>); <span class="comment">// i</span></span><br><span class="line">    eaxx = str;                                 <span class="comment">// str</span></span><br><span class="line">    temp = ebxx + str;                          <span class="comment">// str + i</span></span><br><span class="line">    ebxx = *(_DWORD *)(base_addr_804B15C - <span class="number">12</span>); <span class="comment">// i</span></span><br><span class="line">    eaxx = ebxx + str;                          <span class="comment">// str + i</span></span><br><span class="line">    eaxx = *(<span class="keyword">unsigned</span> __int8 *)(ebxx + str);    <span class="comment">// 取当前字符串</span></span><br><span class="line">    temp1 = eaxx;</span><br><span class="line">    *(_BYTE *)(base_addr_804B15C - <span class="number">41</span>) = eaxx;  <span class="comment">// 把当前字符串保存到一个地址里面</span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// </span></span><br><span class="line">    temp2 = *(_DWORD *)(base_addr_804B15C - <span class="number">12</span>);</span><br><span class="line">    esp1 -= <span class="number">12</span>;</span><br><span class="line">    eaxx = base_addr_804B15C - <span class="number">29</span>;              <span class="comment">// 取feed</span></span><br><span class="line">    push(base_addr_804B15C - <span class="number">29</span>);               <span class="comment">// push(feed)</span></span><br><span class="line">    v2 = <span class="built_in">strlen</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)esp1);          <span class="comment">// v2 是 feed的长度</span></span><br><span class="line">    esp1 += <span class="number">16</span>;</span><br><span class="line">    len = v2;</span><br><span class="line">    eaxx = temp2;</span><br><span class="line">    ebxx = <span class="number">0</span>;</span><br><span class="line">    sub_80485AB(v2);                            <span class="comment">// j = i % v2  </span></span><br><span class="line">                                                <span class="comment">// i = i / v2</span></span><br><span class="line">    eaxx = ebxx;</span><br><span class="line">    eaxx = *(<span class="keyword">unsigned</span> __int8 *)(ebxx - <span class="number">29</span> + base_addr_804B15C);<span class="comment">// 算feed中的偏移</span></span><br><span class="line">    temp1 = eaxx;</span><br><span class="line">    temp1 = *(_BYTE *)(base_addr_804B15C - <span class="number">41</span>) ^ eaxx;<span class="comment">// c ^ feed[]</span></span><br><span class="line">    *(_BYTE *)temp = temp1;</span><br><span class="line">    v3 = eaxx;</span><br><span class="line">    LOBYTE(v3) = <span class="number">0</span>;</span><br><span class="line">    eaxx = v3 + (<span class="keyword">unsigned</span> __int8)temp1;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_80485A5();</span><br><span class="line">  esp1 = base_addr_804B15C - <span class="number">8</span>;</span><br><span class="line">  pop(&amp;temp2);</span><br><span class="line">  pop(&amp;temp);</span><br><span class="line">  <span class="keyword">return</span> pop(&amp;base_addr_804B15C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fun2"><a href="#fun2" class="headerlink" title="fun2"></a>fun2</h3><p>fun2中有两个循环，看似很复杂实则简单</p><p>看到两个寄存器在之间移来移去，发现很多操作都是无效的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  push(base_addr_804B15C);</span><br><span class="line">  base_addr_804B15C = esp1;</span><br><span class="line">  esp1 -= <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">for</span> ( *(_DWORD *)(base_addr_804B15C - <span class="number">4</span>) = <span class="number">0</span>; <span class="comment">// 循环三次</span></span><br><span class="line">        *(_DWORD *)(base_addr_804B15C - <span class="number">4</span>) &lt;= <span class="number">2u</span>;</span><br><span class="line">        ++*(_DWORD *)(base_addr_804B15C - <span class="number">4</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( *(_DWORD *)(base_addr_804B15C - <span class="number">8</span>) = <span class="number">0</span>; ; ++*(_DWORD *)(base_addr_804B15C - <span class="number">8</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      len = a3;</span><br><span class="line">      ebxx = <span class="number">1431655766</span>;</span><br><span class="line">      eaxx = a3;</span><br><span class="line">      sub_80485DB(<span class="number">1431655766</span>);                  <span class="comment">// ebxx = (eaxx * 1431655766) &gt;&gt; 32</span></span><br><span class="line">      ebxx -= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)len &gt;&gt; <span class="number">31</span>;</span><br><span class="line">      eaxx = ebxx;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)(base_addr_804B15C - <span class="number">8</span>) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)ebxx )</span><br><span class="line">        <span class="keyword">break</span>;                                  <span class="comment">// 前面一段是关于判断跳出条件的</span></span><br><span class="line">      len = a3;</span><br><span class="line">      ebxx = <span class="number">0x55555556</span>;</span><br><span class="line">      eaxx = a3;</span><br><span class="line">      sub_80485DB(<span class="number">0x55555556</span>);                  <span class="comment">// ebxx = (unsigned __int64)(a1 * (signed __int64)eaxx) &gt;&gt; 32;</span></span><br><span class="line">                                                <span class="comment">//   </span></span><br><span class="line">      ebxx -= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)len &gt;&gt; <span class="number">31</span>;</span><br><span class="line">      eaxx = ebxx;                              <span class="comment">// repeated</span></span><br><span class="line">      eaxx = ebxx * *(_DWORD *)(base_addr_804B15C - <span class="number">4</span>);</span><br><span class="line">      ebxx = eaxx;</span><br><span class="line">      eaxx = *(_DWORD *)(base_addr_804B15C - <span class="number">8</span>);</span><br><span class="line">      eaxx += ebxx;</span><br><span class="line">      ebxx = eaxx;</span><br><span class="line">      eaxx = a2;</span><br><span class="line">      len = ebxx + a2;                          <span class="comment">// 算偏移地址 addr = 0x804B100 + (i * 18) + j</span></span><br><span class="line">      ebxx = *(_DWORD *)(base_addr_804B15C - <span class="number">8</span>);</span><br><span class="line">      eaxx = <span class="number">2</span> * ebxx;                          <span class="comment">// j * 2</span></span><br><span class="line">      ebxx *= <span class="number">3</span>;                                <span class="comment">// j * 3</span></span><br><span class="line">      eaxx = *(_DWORD *)(base_addr_804B15C - <span class="number">4</span>);<span class="comment">// i</span></span><br><span class="line">      eaxx += ebxx;                             <span class="comment">// i +  j * 3</span></span><br><span class="line">      ebxx = eaxx;                              <span class="comment">// i +  j * 3</span></span><br><span class="line">      eaxx += a1;</span><br><span class="line">      eaxx = *(<span class="keyword">unsigned</span> __int8 *)(a1 + ebxx);   <span class="comment">// *(input + i + j * 3)</span></span><br><span class="line">      temp1 = eaxx;</span><br><span class="line">      *(_BYTE *)len = eaxx;                     <span class="comment">// 修改上方的那个偏移地址</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_80485A5();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻译过来是这样： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;;j++)&#123;</span><br><span class="line">        addr[(i * <span class="number">18</span>) + j] = input + i + j * <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><del>比较fun1和fun2中生成的字符串是否相等</del></p><p>经高人指点，不是比较fun1和fun2的字符串，而是先经过fun1进行处理，然后再经过fun2处理，然后直接和内存中的一串字符串进行比较</p><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">feed = <span class="string">"feeddeadbeefcafe"</span></span><br><span class="line">enc = [<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x09</span>,<span class="number">0x3A</span>,<span class="number">0x05</span>,<span class="number">0x0E</span>,<span class="number">0x02</span>,<span class="number">0x16</span>,<span class="number">0x0F</span>,<span class="number">0x1F</span>,<span class="number">0x12</span>,<span class="number">0x56</span>,<span class="number">0x3B</span>,<span class="number">0x0B</span>,<span class="number">0x51</span>,<span class="number">0x50</span>,<span class="number">0x39</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x1F</span>,<span class="number">0x50</span>,<span class="number">0x04</span>,<span class="number">0x14</span>,<span class="number">0x57</span>,<span class="number">0x3B</span>,<span class="number">0x12</span>,<span class="number">0x07</span>,<span class="number">0x3C</span>,<span class="number">0x1C</span>,<span class="number">0x3A</span>,<span class="number">0x15</span>,<span class="number">0x05</span>,<span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x12</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x05</span>,<span class="number">0x0B</span>,<span class="number">0x50</span>,<span class="number">0x57</span>,<span class="number">0x09</span>,<span class="number">0x12</span>,<span class="number">0x0A</span>,<span class="number">0x27</span>,<span class="number">0x13</span>,<span class="number">0x17</span>,<span class="number">0x0E</span>,<span class="number">0x02</span>,<span class="number">0x55</span>,<span class="number">0x18</span>]</span><br><span class="line">dec = [<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x09</span>,<span class="number">0x3A</span>,<span class="number">0x05</span>,<span class="number">0x0E</span>,<span class="number">0x02</span>,<span class="number">0x16</span>,<span class="number">0x0F</span>,<span class="number">0x1F</span>,<span class="number">0x12</span>,<span class="number">0x56</span>,<span class="number">0x3B</span>,<span class="number">0x0B</span>,<span class="number">0x51</span>,<span class="number">0x50</span>,<span class="number">0x39</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x1F</span>,<span class="number">0x50</span>,<span class="number">0x04</span>,<span class="number">0x14</span>,<span class="number">0x57</span>,<span class="number">0x3B</span>,<span class="number">0x12</span>,<span class="number">0x07</span>,<span class="number">0x3C</span>,<span class="number">0x1C</span>,<span class="number">0x3A</span>,<span class="number">0x15</span>,<span class="number">0x05</span>,<span class="number">0x0B</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x12</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x05</span>,<span class="number">0x0B</span>,<span class="number">0x50</span>,<span class="number">0x57</span>,<span class="number">0x09</span>,<span class="number">0x12</span>,<span class="number">0x0A</span>,<span class="number">0x27</span>,<span class="number">0x13</span>,<span class="number">0x17</span>,<span class="number">0x0E</span>,<span class="number">0x02</span>,<span class="number">0x55</span>,<span class="number">0x18</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        dec[i + j * <span class="number">3</span>] = enc[i * <span class="number">18</span> + j]</span><br><span class="line"></span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">54</span>):</span><br><span class="line">    dec[i] ^= ord(feed[i % <span class="number">16</span>])</span><br><span class="line">    ans = ans + chr(dec[i])</span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="cgctf" scheme="https://mrh1s.top/categories/write-up/cgctf/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="VM" scheme="https://mrh1s.top/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>多并发编程尝试</title>
    <link href="https://mrh1s.top/posts/db7779bb/"/>
    <id>https://mrh1s.top/posts/db7779bb/</id>
    <published>2019-05-08T14:20:36.000Z</published>
    <updated>2019-05-15T08:28:11.199Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经查资料，多并发编程需要用到一个库</p><blockquote><p>#include &lt; thread&gt;</p><p>using namespace std;</p></blockquote><p>线程初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">thread <span class="title">t</span><span class="params">(fun)</span></span>;<span class="comment">//fun为要多线程运行的函数</span></span><br></pre></td></tr></table></figure><p>等待线程终止：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.join();<span class="comment">//等待名为t的函数终止运行</span></span><br></pre></td></tr></table></figure><p>如下实现了先启动输出first的线程，但由于多并发，second先输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Sleep(<span class="number">200</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"first task\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(fun)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"second task\n"</span>);</span><br><span class="line">t.join();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"third task\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="c-learn" scheme="https://mrh1s.top/categories/c-learn/"/>
    
    
  </entry>
  
  <entry>
    <title>homuraVM</title>
    <link href="https://mrh1s.top/posts/f22525af/"/>
    <id>https://mrh1s.top/posts/f22525af/</id>
    <published>2019-05-07T15:22:42.000Z</published>
    <updated>2019-05-07T15:57:03.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HomuraVM"><a href="#HomuraVM" class="headerlink" title="HomuraVM"></a>HomuraVM</h1><blockquote><p>太丢脸了，这么简单一个vm还是做了三个多小时</p></blockquote><p><a href="\uploads\homuraVM.7z">homuraVM</a></p><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>这道题是WxyVM的一个加强版，即使把vm的指令翻译出来了，也会发现得到的是一串鸟语，俗称类brainf**k语言</p><p>程序的大概思路是这样的，读入一串数据，然后把这段数据载入内存，随后执行保存在程序里面的一段虚拟机代码，虚拟机的各种函数已经给出，最终生成的加密结果也能找到，逆向程序。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="对vm的代码进行读取"><a href="#对vm的代码进行读取" class="headerlink" title="对vm的代码进行读取"></a>对vm的代码进行读取</h3><p>自己写的IDA中的注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="keyword">unsigned</span> __int8 *)(COUNTER + a1);</span><br><span class="line">    <span class="keyword">if</span> ( !(_BYTE)result )                       <span class="comment">// 没有指令了 就退出</span></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    v2 = *(<span class="keyword">char</span> *)(COUNTER + a1);</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)off_1048 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x43</span>u:                               <span class="comment">// *j -= 2 * (*i &amp; *a)    C</span></span><br><span class="line">        *(_DWORD *)global_j -= <span class="number">2</span> * (*(_DWORD *)global_i &amp; *(_DWORD *)array_input);</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x47</span>u:                               <span class="comment">// (*j)--              G</span></span><br><span class="line">        --*(_DWORD *)global_j;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x4D</span>u:                               <span class="comment">// *j = *i + a[0]                  M</span></span><br><span class="line">        *(_DWORD *)global_j = *(_DWORD *)global_i + *(_DWORD *)array_input;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x54</span>u:                               <span class="comment">// (*j)++            T</span></span><br><span class="line">        ++*(_DWORD *)global_j;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x5B</span>u:                               <span class="comment">// 如果a[0]!=0 就循环，否则直接跳出    [</span></span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)array_input )</span><br><span class="line">        &#123;</span><br><span class="line">          ++COUNTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            v3 = COUNTER++;</span><br><span class="line">          <span class="keyword">while</span> ( *(_BYTE *)(v3 + a1) != <span class="number">93</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x5D</span>u:                               <span class="comment">// 如果a[0]!=0 就返回[继续循环           ]</span></span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)array_input )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            --COUNTER;</span><br><span class="line">          <span class="keyword">while</span> ( *(_BYTE *)(COUNTER + a1) != <span class="number">91</span> );</span><br><span class="line">          ++COUNTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          ++COUNTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x61</span>u:                               <span class="comment">// (*i)--          a</span></span><br><span class="line">        --*(_DWORD *)global_i;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x68</span>u:                               <span class="comment">// a[0] += 4       h</span></span><br><span class="line">        array_input = (<span class="keyword">char</span> *)array_input + <span class="number">4</span>;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x6D</span>u:                               <span class="comment">// a[0]自加         m</span></span><br><span class="line">        ++*(_DWORD *)array_input;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x6F</span>u:                               <span class="comment">// a[0] -= 4          o</span></span><br><span class="line">        array_input = (<span class="keyword">char</span> *)array_input - <span class="number">4</span>;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x72</span>u:                               <span class="comment">// (*i)++        r</span></span><br><span class="line">        ++*(_DWORD *)global_i;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x75</span>u:                               <span class="comment">// a[0]--         u</span></span><br><span class="line">        --*(_DWORD *)array_input;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x76</span>u:                               <span class="comment">// j = i             v</span></span><br><span class="line">        *(_DWORD *)global_j = *(_DWORD *)global_i;</span><br><span class="line">        ++COUNTER;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x7B</span>u:</span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)global_j )              <span class="comment">// *j !=0 就进入循环，否则直接跳出</span></span><br><span class="line">        &#123;</span><br><span class="line">          ++COUNTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            v4 = COUNTER++;</span><br><span class="line">          <span class="keyword">while</span> ( *(_BYTE *)(v4 + a1) != <span class="number">125</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x7D</span>u:</span><br><span class="line">        <span class="keyword">if</span> ( *(_DWORD *)global_j )              <span class="comment">// 如果*j不为0就返回&#123;处</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            --COUNTER;</span><br><span class="line">          <span class="keyword">while</span> ( *(_BYTE *)(COUNTER + a1) != <span class="number">123</span> );</span><br><span class="line">          ++COUNTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          ++COUNTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="清除无用虚拟机指令"><a href="#清除无用虚拟机指令" class="headerlink" title="清除无用虚拟机指令"></a>清除无用虚拟机指令</h3><p>首先我尝试着把无效命令先清除掉:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"""h[ur]ovMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]</span></span><br><span class="line"><span class="string">ovrrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrararaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrarar</span></span><br><span class="line"><span class="string">rrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovararaaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrararra</span></span><br><span class="line"><span class="string">raMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrarrrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrar</span></span><br><span class="line"><span class="string">rMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaarrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrarrM</span></span><br><span class="line"><span class="string">Ch&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrraaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovarraarMCh</span></span><br><span class="line"><span class="string">&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrraaarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaarrrrarr</span></span><br><span class="line"><span class="string">MCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrraarrarrMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrar</span></span><br><span class="line"><span class="string">raMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaaraarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarraM</span></span><br><span class="line"><span class="string">Ch&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrraarraMC</span></span><br><span class="line"><span class="string">h&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrarMCh&#123;mG&#125;</span></span><br><span class="line"><span class="string">hv&#123;aG&#125;[ur]ovrrraarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrraaMCh&#123;mG&#125;hv&#123;</span></span><br><span class="line"><span class="string">aG&#125;[ur]ovrrarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrrrrrMCh&#123;mG&#125;hv&#123;aG&#125;</span></span><br><span class="line"><span class="string">[ur]ovaaaarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrraaaMCh&#123;mG&#125;hv&#123;aG&#125;[ur]o</span></span><br><span class="line"><span class="string">vaarraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovrrarMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarra</span></span><br><span class="line"><span class="string">aMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarraraMCh&#123;mG&#125;hv&#123;aG&#125;[ur]ovaarrara</span></span><br><span class="line"><span class="string">rMCh&#123;mG&#125;"""</span></span><br><span class="line"></span><br><span class="line">str = str.replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">old = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span>(old != str):</span><br><span class="line">    old = str</span><br><span class="line">    str = str.replace(<span class="string">"ra"</span>, <span class="string">""</span>)</span><br><span class="line">    str = str.replace(<span class="string">"ar"</span>, <span class="string">""</span>)</span><br><span class="line">    str = str.replace(<span class="string">"oh"</span>, <span class="string">""</span>)</span><br><span class="line">    str = str.replace(<span class="string">"ho"</span>, <span class="string">""</span>)</span><br><span class="line">    str = str.replace(<span class="string">"um"</span>, <span class="string">""</span>)</span><br><span class="line">    str = str.replace(<span class="string">"mu"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n\n\n"</span>)</span><br><span class="line">h_cnt = <span class="number">0</span></span><br><span class="line">o_cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'h'</span>):</span><br><span class="line">        h_cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(h_cnt == <span class="number">3</span>):</span><br><span class="line">            h_cnt = <span class="number">1</span></span><br><span class="line">            o_cnt = <span class="number">0</span></span><br><span class="line">            print(<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">elif</span>(c == <span class="string">'o'</span>):</span><br><span class="line">        o_cnt += <span class="number">1</span></span><br><span class="line">    print(c, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>可得以下字符串（VScode显示有点问题，打印到文件中就行）</p><blockquote><p>h[ur]ovMCh{mG}<br>hv{aG}[ur]ovaaaMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovMCh{mG}<br>hv{aG}[ur]ovrrrMCh{mG}<br>hv{aG}[ur]ovaaMCh{mG}<br>hv{aG}[ur]ovrMCh{mG}<br>hv{aG}[ur]ovrrrrrMCh{mG}<br>hv{aG}[ur]ovrMCh{mG}<br>hv{aG}[ur]ovaMCh{mG}<br>hv{aG}[ur]ovrrrrMCh{mG}<br>hv{aG}[ur]ovaMCh{mG}<br>hv{aG}[ur]ovMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovrrrrrMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovaaMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovrMCh{mG}<br>hv{aG}[ur]ovrMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovrrrrrrMCh{mG}<br>hv{aG}[ur]ovaaaMCh{mG}<br>hv{aG}[ur]ovaMCh{mG}<br>hv{aG}[ur]ovaMCh{mG}<br>hv{aG}[ur]ovrrMCh{mG}<br>hv{aG}[ur]ovaaMCh{mG}<br>hv{aG}[ur]ovaMCh{mG}<br>hv{aG}[ur]ovMCh{mG}</p></blockquote><h3 id="得到正向算法（递推公式）"><a href="#得到正向算法（递推公式）" class="headerlink" title="得到正向算法（递推公式）"></a>得到正向算法（递推公式）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MCh&#123;mG&#125;hv&#123;aG&#125;[ur]ov</span></span><br><span class="line">*j = *i + *a - <span class="number">2</span> * (*i &amp; *a)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//&#123;mG&#125;:   *a += j  j清空</span></span><br><span class="line"><span class="keyword">while</span>(*j):</span><br><span class="line">    *a++</span><br><span class="line">    *j--</span><br><span class="line">        </span><br><span class="line"><span class="comment">//&#123;aG&#125;:    i -= j  j清空 </span></span><br><span class="line"><span class="keyword">while</span>(*j):</span><br><span class="line">    *i--</span><br><span class="line">    *j--</span><br><span class="line">        </span><br><span class="line"><span class="comment">//[ur]:   i = *a   a清空</span></span><br><span class="line"><span class="keyword">while</span>(*a)  </span><br><span class="line">    *a--</span><br><span class="line">    *i++</span><br><span class="line">    </span><br><span class="line"><span class="comment">//r:</span></span><br><span class="line">    *i++</span><br><span class="line"><span class="comment">//a:</span></span><br><span class="line">    *i--</span><br><span class="line"><span class="comment">//v:</span></span><br><span class="line">    j = i</span><br></pre></td></tr></table></figure><p>经过研究</p><blockquote><p>“v{ag}”       没有起到任何作用，</p><p>“v” 将i的值取到了j中</p><p>然后i和j一同被清空了</p></blockquote><blockquote><p>“ov”中的“v”也没有起到作用，因为在后面j的值会被刷新</p></blockquote><p>再次精简：（去掉v{aG}  ）</p><blockquote><p>h[ur]oMCh{mG}<br>h[ur]oaaaMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]oMCh{mG}<br>h[ur]orrrMCh{mG}<br>h[ur]oaaMCh{mG}<br>h[ur]orMCh{mG}<br>h[ur]orrrrrMCh{mG}<br>h[ur]orMCh{mG}<br>h[ur]oaMCh{mG}<br>h[ur]orrrrMCh{mG}<br>h[ur]oaMCh{mG}<br>h[ur]oMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]orrrrrMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]oaaMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]orMCh{mG}<br>h[ur]orMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]oMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]orrrrrrMCh{mG}<br>h[ur]oaaaMCh{mG}<br>h[ur]oaMCh{mG}<br>h[ur]oaMCh{mG}<br>h[ur]orrMCh{mG}<br>h[ur]oaaMCh{mG}<br>h[ur]oaMCh{mG}<br>h[ur]oMCh{mG}</p></blockquote><blockquote><p>即</p><p>h 指针加一</p><p>[ur] 将*(a+1)全部转移到 i 中</p><p>o 指针减一</p><p>ar index改变    i = *(a+1) + index</p><p>M     j = <em>(a+1) + index +   </em>a</p><p>C    j  -=   ((<em>(a+1) + index) &amp; </em>a) * 2</p><p>MC:     j = <em>(a+1) + index  +  </em>a  -   (( <em>(a+1) + index) &amp; </em>a) * 2</p><p>h 指针加一</p><p>{mG}  把j的内容放到*(a+1)</p></blockquote><p><strong>递推公式：new(<em>(a+1)) = </em>(a+1) + index +   <em>a -  (( </em>( a+1) + index) &amp; <em>a) </em> 2</strong></p><p>(index为 一大堆rraa 最后得到的值)</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>知道了<em>(a+1)    后面的新值，知道了    </em>(a+1) ，要求原来的 *(a+1)的值，只能通过枚举</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">27</span>, <span class="number">114</span>, <span class="number">17</span>, <span class="number">118</span>, <span class="number">8</span>, <span class="number">74</span>, <span class="number">126</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">124</span>, <span class="number">31</span>, <span class="number">88</span>, <span class="number">104</span>, <span class="number">7</span>,</span><br><span class="line"><span class="number">112</span>, <span class="number">7</span>, <span class="number">49</span>, <span class="number">108</span>, <span class="number">4</span>, <span class="number">47</span>, <span class="number">4</span>, <span class="number">105</span>, <span class="number">54</span>, <span class="number">77</span>, <span class="number">127</span>, <span class="number">8</span>, <span class="number">80</span>, <span class="number">12</span>, <span class="number">109</span>, <span class="number">28</span>, <span class="number">127</span>, <span class="number">80</span>, <span class="number">29</span>, <span class="number">96</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = []</span><br><span class="line">f = open(<span class="string">"index.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">34</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    s = f.readline()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'r'</span>):</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'a'</span>):</span><br><span class="line">            cnt -= <span class="number">1</span></span><br><span class="line">    index.append(cnt)</span><br><span class="line"></span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span>(enc[i] == c + index[i] + enc[i<span class="number">-1</span>] - <span class="number">2</span> * ((c + index[i]) &amp; enc[i<span class="number">-1</span>])):</span><br><span class="line">            ans = chr(c) + ans</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><p>输出：lag{D3v1L_H0mur4_f**k_y0uR_bra1N}</p><p>由于如下代码（IDA dump出来的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__isoc99_scanf(<span class="string">"%s"</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *((_DWORD *)array_input + i + <span class="number">1L</span>L) = s[i];</span><br><span class="line">  &#125;</span><br><span class="line">  *(_DWORD *)array_input = s[<span class="built_in">strlen</span>(s) - <span class="number">1</span>];    <span class="comment">// 读取方式有点奇怪，最后一个字符放在开头的</span></span><br></pre></td></tr></table></figure><p>输入的字符串并没有按照顺序存储，而是将输入的最后一个字符放到了内存开头，说明之后的操作全部都是从第二位开始的</p><p>通过最后一位和第一位的值同样可以逆推出原值，直接根据格式猜也行，flag嘛缺个”f”hhhh</p><p>flag{D3v1L_H0mur4_f**k_y0uR_bra1N}</p><p>​    <strong>本题用到了程序语言的化简，还有寻找规律的相关方法，遇到这样的题最好是先自己模拟一个循环节，找到规律再尝试写脚本解。因为并不是所有的虚拟机都是每步操作都可逆的23333</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write-up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="cgctf" scheme="https://mrh1s.top/categories/write-up/cgctf/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="VM" scheme="https://mrh1s.top/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>学生信息管理系统</title>
    <link href="https://mrh1s.top/posts/a4a48694/"/>
    <id>https://mrh1s.top/posts/a4a48694/</id>
    <published>2019-05-06T11:05:19.000Z</published>
    <updated>2019-05-06T11:12:45.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="\uploads\store-grades.docx">store-grades.docx</a></p><blockquote><p>丢人现眼的大一下数据结构项目（我脸皮厚还是放网站上来存个档吧</p></blockquote><p>用链表实现了对学生信息的读取，存储，排序的功能。</p><p>主要数据结构：链表，算法：冒泡排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> sno[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">char</span> sname[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">char</span> major[<span class="number">20</span>];</span><br><span class="line">    Student *next; <span class="comment">//指向后继数据结点</span></span><br><span class="line">&#125;*StudentList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Course</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> cno[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> cname[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> classHours;</span><br><span class="line">Course *next;</span><br><span class="line">&#125;*CourseList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Grade</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> sno[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">char</span> cno[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> score ;</span><br><span class="line">    Grade *next;</span><br><span class="line">&#125;*GradeList;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct allinfo&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">FILE *<span class="title">Open_File</span><span class="params">(<span class="keyword">int</span> who, <span class="keyword">int</span> rw)</span></span>&#123;<span class="comment">//打开哪个文件，打开方式如何 </span></span><br><span class="line">FILE *p;</span><br><span class="line"><span class="keyword">switch</span>(who)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>(rw) p = fopen(<span class="string">"student.dat"</span>,<span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">else</span> p = fopen(<span class="string">"student.dat"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>(rw) p = fopen(<span class="string">"course.dat"</span>,<span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">else</span> p = fopen(<span class="string">"course.dat"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>(rw) p = fopen(<span class="string">"courseGrade.dat"</span>,<span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">else</span> p = fopen(<span class="string">"courseGrade.dat"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 以下是关于学生的代码 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">Student* <span class="title">Read_Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *StuFile = Open_File(<span class="number">1</span>, <span class="number">0</span>);<span class="comment">//read</span></span><br><span class="line">Student *head = (Student *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student));</span><br><span class="line">Student *pre = head;</span><br><span class="line"><span class="keyword">while</span>(!feof(StuFile))&#123;</span><br><span class="line">Student *p = (Student *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student));</span><br><span class="line"><span class="built_in">fscanf</span>(StuFile, <span class="string">"%s%s%s%s"</span>, p-&gt;sno, p-&gt;sname, p-&gt;sex, p-&gt;major);</span><br><span class="line">pre-&gt;next = p;</span><br><span class="line">pre = p;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fclose(StuFile);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">Student *p = StudentList-&gt;next;</span><br><span class="line">Student *pre = StudentList;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span> )&#123;<span class="comment">//存在两个可以比较的结点 </span></span><br><span class="line">Student *pnext = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;sno, pnext-&gt;sno) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">pre-&gt;next = pnext;</span><br><span class="line">p-&gt;next = pnext-&gt;next;</span><br><span class="line">pnext-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student *p = StudentList-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nStudentList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s %s %s"</span>, p-&gt;sno, p-&gt;sname, p-&gt;sex, p-&gt;major);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write_Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *StuFile = Open_File(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//write</span></span><br><span class="line">Student *p = (Student *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No.%2d:"</span>, i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s%s%s"</span>, p-&gt;sno, p-&gt;sname, p-&gt;sex, p-&gt;major);</span><br><span class="line"><span class="built_in">fprintf</span>(StuFile, <span class="string">"%s %s %s %s"</span>, p-&gt;sno, p-&gt;sname, p-&gt;sex, p-&gt;major);</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">10</span>) <span class="built_in">fprintf</span>(StuFile, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">fclose(StuFile);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 以下是关于课程的代码 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">Course* <span class="title">Read_Course</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *CourseFile = Open_File(<span class="number">2</span>, <span class="number">0</span>);<span class="comment">//read</span></span><br><span class="line">Course *head = (Course *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Course));</span><br><span class="line">Course *pre = head;</span><br><span class="line"><span class="keyword">while</span>(!feof(CourseFile))&#123;</span><br><span class="line">Course *p = (Course *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Course));</span><br><span class="line"><span class="built_in">fscanf</span>(CourseFile, <span class="string">"%s%s%d"</span>, p-&gt;cno, p-&gt;cname, &amp;p-&gt;classHours);</span><br><span class="line">pre-&gt;next = p;</span><br><span class="line">pre = p;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fclose(CourseFile);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Course</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">Course *p = CourseList-&gt;next;</span><br><span class="line">Course *pre = CourseList;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span> )&#123;<span class="comment">//存在两个可以比较的结点 </span></span><br><span class="line">Course *pnext = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;cno, pnext-&gt;cno) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">pre-&gt;next = pnext;</span><br><span class="line">p-&gt;next = pnext-&gt;next;</span><br><span class="line">pnext-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Course</span><span class="params">()</span></span>&#123;</span><br><span class="line">Course *p = CourseList-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nCourseList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s %d"</span>, p-&gt;cno, p-&gt;cname, p-&gt;classHours);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write_Course</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *CourseFile = Open_File(<span class="number">2</span>, <span class="number">1</span>);<span class="comment">//write</span></span><br><span class="line">Course *p = (Course *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Course));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No.%2d:"</span>, i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s%d"</span>, p-&gt;cno, p-&gt;cname, &amp;p-&gt;classHours);</span><br><span class="line"><span class="built_in">fprintf</span>(CourseFile, <span class="string">"%s %s %d"</span>, p-&gt;cno, p-&gt;cname, p-&gt;classHours);</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">3</span>) <span class="built_in">fprintf</span>(CourseFile, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">fclose(CourseFile);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 以下是关于成绩的代码 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">Grade* <span class="title">Read_Grade</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *GradeFile = Open_File(<span class="number">3</span>, <span class="number">0</span>);<span class="comment">//read</span></span><br><span class="line">Grade *head = (Grade *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Grade));</span><br><span class="line">Grade *pre = head;</span><br><span class="line"><span class="keyword">while</span>(!feof(GradeFile))&#123;</span><br><span class="line">Grade *p = (Grade *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Grade));</span><br><span class="line"><span class="built_in">fscanf</span>(GradeFile, <span class="string">"%s%s%d"</span>, p-&gt;sno, p-&gt;cno, &amp;p-&gt;score);</span><br><span class="line">pre-&gt;next = p;</span><br><span class="line">pre = p;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fclose(GradeFile);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Grade</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">Grade *p = GradeList-&gt;next;</span><br><span class="line">Grade *pre = GradeList;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span> )&#123;<span class="comment">//存在两个可以比较的结点 </span></span><br><span class="line">Grade *pnext = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;sno, pnext-&gt;sno) &gt; <span class="number">0</span> || (<span class="built_in">strcmp</span>(p-&gt;sno, pnext-&gt;sno) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;cno, pnext-&gt;cno) &gt; <span class="number">0</span>) )&#123;</span><br><span class="line">pre-&gt;next = pnext;</span><br><span class="line">p-&gt;next = pnext-&gt;next;</span><br><span class="line">pnext-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Grade</span><span class="params">()</span></span>&#123;</span><br><span class="line">Grade *p = GradeList-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nGradeList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s %d"</span>, p-&gt;sno, p-&gt;cno, p-&gt;score);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write_Grade</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *GradeFile = Open_File(<span class="number">3</span>, <span class="number">1</span>);<span class="comment">//write</span></span><br><span class="line">Grade *p = (Grade *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Grade));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No.%2d:"</span>, i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s%d"</span>, p-&gt;sno, p-&gt;cno, &amp;p-&gt;score);</span><br><span class="line"><span class="built_in">fprintf</span>(GradeFile, <span class="string">"%s %s %d"</span>, p-&gt;sno, p-&gt;cno, p-&gt;score);</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">10</span>) <span class="built_in">fprintf</span>(GradeFile, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">fclose(GradeFile);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_StudentsGrade</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">Grade *p = GradeList-&gt;next;</span><br><span class="line">Grade *pre = GradeList;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span> )&#123;<span class="comment">//存在两个可以比较的结点 </span></span><br><span class="line">Grade *pnext = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;score &lt; pnext-&gt;score)&#123;</span><br><span class="line">pre-&gt;next = pnext;</span><br><span class="line">p-&gt;next = pnext-&gt;next;</span><br><span class="line">pnext-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student *<span class="title">Find_Student</span><span class="params">(<span class="keyword">char</span> *num)</span></span>&#123;</span><br><span class="line">Student *p = StudentList-&gt;next;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;sno, num) == <span class="number">0</span>) <span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;<span class="keyword">while</span>(p != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">p = (Student*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student));</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">3</span>] = <span class="string">"-1"</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;major, temp);</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;sex, temp);</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;sname, temp);</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;sno, temp);</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//返回错误 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Course *<span class="title">Find_Course</span><span class="params">(<span class="keyword">char</span> *num)</span></span>&#123;</span><br><span class="line">Course *p = CourseList-&gt;next;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;cno, num) == <span class="number">0</span>) <span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;<span class="keyword">while</span>(p != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">p = (Course*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Course));</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">3</span>] = <span class="string">"-1"</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;cname, temp);</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;cno, temp);</span><br><span class="line">p-&gt;classHours = <span class="number">-1</span>;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//返回错误 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_All</span><span class="params">(Grade *p)</span></span>&#123;</span><br><span class="line">Student *s = Find_Student(p-&gt;sno);</span><br><span class="line">Course *c = Find_Course(p-&gt;cno);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%6s %6s %6s %6s %3d"</span>, s-&gt;sno, s-&gt;sname, s-&gt;major, c-&gt;cname, p-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Seven</span><span class="params">()</span></span>&#123;<span class="comment">//Task7 </span></span><br><span class="line">Grade *p = GradeList-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nGradeList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nnumber   name  major  course  grade"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">Print_All(p);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Eight</span><span class="params">(<span class="keyword">char</span>* num)</span></span>&#123;<span class="comment">//Task8 指定课程号 </span></span><br><span class="line">Grade *p = GradeList-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nGradeList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nnumber   name  major  course  grade"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;cno, num) == <span class="number">0</span>) Print_All(p);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Nine</span><span class="params">()</span></span>&#123;<span class="comment">//Task9 </span></span><br><span class="line">Grade *p = GradeList-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nGradeList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nnumber   name  major  course  grade"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;score &lt; <span class="number">60</span>) Print_All(p);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student *head = (Student*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Student));</span><br><span class="line">Student *p = StudentList-&gt;next;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">Student *t = p-&gt;next;<span class="comment">//暂时保存p的下一个结点 </span></span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">p = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StudentList = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Queue_Push</span><span class="params">(Grade *p, Grade *&amp;top, Grade *&amp;rear)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">top-&gt;next = p;</span><br><span class="line">rear-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;next = top;</span><br><span class="line">top = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Grade* <span class="title">Queue_Pop</span><span class="params">(Grade *&amp;top, Grade *&amp;rear)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top-&gt;next == rear-&gt;next)&#123;</span><br><span class="line">top-&gt;next = rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> top-&gt;next;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">rear-&gt;next = top-&gt;next;</span><br><span class="line"><span class="keyword">return</span> rear-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Eleven</span><span class="params">(Grade *top, Grade *rear)</span></span>&#123;</span><br><span class="line">Grade *p = Queue_Pop(top, rear);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nGradeList"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nnumber   name  major  course  grade"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">Print_All(p);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------------\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line">Student *HEAD = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to Students' score system!\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1.Input students.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2.Input courses.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3.Input grades.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4.Output students.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"5.Output courses.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"6.Output grades.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"7.Output all.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"8.Output all of a course.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"9.Output all below 60.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"10.Reverse students.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"11.Output all.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nPlease input an option:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">switch</span>(opt)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">Write_Student();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"done.\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">Write_Course();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"done.\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">Write_Grade();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"done.\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">StudentList = Read_Student();</span><br><span class="line">BubbleSort_Student();</span><br><span class="line">Print_Student();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">CourseList = Read_Course();</span><br><span class="line">BubbleSort_Course();</span><br><span class="line">Print_Course();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">GradeList = Read_Grade();</span><br><span class="line">BubbleSort_Grade();</span><br><span class="line">Print_Grade();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:&#123;</span><br><span class="line">StudentList = Read_Student();</span><br><span class="line">CourseList = Read_Course();</span><br><span class="line">GradeList = Read_Grade();</span><br><span class="line">BubbleSort_StudentsGrade();<span class="comment">//按照成绩排序 </span></span><br><span class="line">Print_Seven();</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:&#123;</span><br><span class="line">StudentList = Read_Student();</span><br><span class="line">CourseList = Read_Course();</span><br><span class="line">GradeList = Read_Grade();</span><br><span class="line">BubbleSort_StudentsGrade();<span class="comment">//按照成绩排序 </span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input course name:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">Print_Eight(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:&#123;</span><br><span class="line">StudentList = Read_Student();</span><br><span class="line">CourseList = Read_Course();</span><br><span class="line">GradeList = Read_Grade();</span><br><span class="line">BubbleSort_StudentsGrade();<span class="comment">//按照成绩排序 </span></span><br><span class="line">Print_Nine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:&#123;</span><br><span class="line">StudentList = Read_Student();</span><br><span class="line">ReverseStudent();<span class="comment">//逆序生成新的链表 </span></span><br><span class="line">Print_Student();<span class="comment">//输出该链表 </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:&#123;</span><br><span class="line">StudentList = Read_Student();</span><br><span class="line">CourseList = Read_Course();</span><br><span class="line">GradeList = Read_Grade();</span><br><span class="line">BubbleSort_StudentsGrade();<span class="comment">//按照成绩排序 </span></span><br><span class="line">Print_Seven();</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="project" scheme="https://mrh1s.top/categories/project/"/>
    
    
  </entry>
  
  <entry>
    <title>To Be Alone</title>
    <link href="https://mrh1s.top/posts/25290751/"/>
    <id>https://mrh1s.top/posts/25290751/</id>
    <published>2019-05-04T11:11:00.000Z</published>
    <updated>2019-05-04T15:39:44.428Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你的生活难道是过给别人看的？</p><blockquote><p>一个人成熟的标志之一就是：明白每天发生在自己身上的99%的事情对于别人而言根本毫无意义。</p></blockquote><p> ——Mark Bauerlein</p><p>有的人爱热闹，爱交流，爱群居生活。</p><p>但独处、安静和不动声色同样被一些人需要着。</p><p>合群有合群的好，独处也有独处的好。无论哪种生活方式，自己觉得舒适不就行了 ？生活充实有效率不就行了？</p><p>都大学生了，已经是一个完全独立对自己负责的成年人了。</p><p>每个人都有着自己的目标，都怀着自己的心事，都走在自己的轨迹上，都忙着自己的故事。</p><p>每个人都是一条河流，每条河流都有自己的方向。</p><p>没有交集是正常的，独处乃至孤独都是常态，哪有什么丢不丢人的？</p><p>与其关心这些，你不如关心</p><p>大学生挂科丢不丢人？大学生四六级没过丢不丢人？大学生GPA/加权垫底丢不丢人？大学生没拿过奖学金丢不丢人？</p><p>生活该有的样子是什么？</p><p>一言以蔽之：<strong>阅己，悦己，越己。</strong></p><p><img src="https://i.loli.net/2019/05/04/5ccd739ca75f5.jpg" alt="v2-3d23d3d9934db2b4379f6894ffe3ed26_hd.jpg"></p><p>链接：<a href="https://www.zhihu.com/question/307092372/answer/621757215" target="_blank" rel="noopener">https://www.zhihu.com/question/307092372/answer/621757215</a></p><p>来源：知乎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="牢骚" scheme="https://mrh1s.top/categories/%E7%89%A2%E9%AA%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>Migration_Success!</title>
    <link href="https://mrh1s.top/posts/ebedb07/"/>
    <id>https://mrh1s.top/posts/ebedb07/</id>
    <published>2019-05-03T11:24:16.000Z</published>
    <updated>2019-05-05T05:51:59.612Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 把<strong>wordpress</strong>里面的所有内容迁移到了<strong>github page</strong></p><blockquote><p> 中途花了不少功夫</p><p>wordpress网页转md各种格式错误，文件引用错误，需要手动改</p></blockquote><p>以后就用这个静态网站啦！</p><p>排版比wordpress舒服多了，而且不用租服务器</p><p>回头我再去研究研究hexo的主题配置（咕 （划去，<strong>主题已经配置好</strong></p><p>并且把之前所有的非markdown文章的格式改了一下，使其更好看</p><blockquote><p> 可恶的强迫症</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="牢骚" scheme="https://mrh1s.top/categories/%E7%89%A2%E9%AA%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>bbvvmm</title>
    <link href="https://mrh1s.top/posts/ea74c872/"/>
    <id>https://mrh1s.top/posts/ea74c872/</id>
    <published>2019-04-28T04:56:40.000Z</published>
    <updated>2019-05-21T04:32:51.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="bbvvmm"><a href="#bbvvmm" class="headerlink" title="bbvvmm"></a>bbvvmm</h3><p>用ida打开 可以发现程序读入了用户名和密码，然后对用户名和密码进行了加密，如果用户名和密码校验正确，那么就cat flag</p><p>首先是用户名，用户名先进行一层加密，后进行sm4加密，最后进行变表base64转换为了一串密文</p><p>首先解决base64：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">tab2 = <span class="string">"IJLMNOPKABDEFGHCQRTUVWXSYZbcdefa45789+/6ghjklmnioprstuvqwxz0123y="</span></span><br><span class="line">tab1 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">"RVYtG85NQ9OPHU4uQ8AuFM+MHVVrFMJMR8FuF8WJQ8Y="</span></span><br><span class="line">s1 = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s2:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tab2)):</span><br><span class="line">        <span class="keyword">if</span>(tab2[i] == c):</span><br><span class="line">            s1 += tab1[i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(base64.b64decode(s1))</span><br></pre></td></tr></table></figure><p>得到“EF468DBAF985B2509C9E200CF3525AB6”</p><p>然后是sm4加密算法，直接在网上找轮子<br>解密得到“36 32 36 31 36 34 37 32 36 35 37 32 33 31 33 32”</p><p>最后<br>两次转化成ascii<br>第一次62 61 54 72 65 72 31 32<br>第二次b a d r e r 1 2</p><p>然后就得到了用户名</p><p>对于密码，并不清楚这个密码使用了什么加密算法，只清楚这是一个虚拟机，有几百个操作数，好像是对密码进行了某种运算，最后将运算结果保存到内存的某个地方，如果这个内存数据为0，那么密码便正确</p><p>直接开ida动态远程调试：<br>能找到一个类似于栈的结构（一直+4 -4），在内存中找到这个栈对应的位置<br><img src="https://i.imgur.com/JBq8VUh.png" alt></p><p>通过不断地循环fastcall，看到栈中出现了我刚刚输入的字符串，并且旁边是一堆奇特字符串，而且长度也是六位，于是尝试交上去，成功</p><p>getshell的时候：输入密码之后不能直接按回车键，这样会多输入一个 \n，而应该ctrl+d，输入文本中断符，然后拿到flag</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="nationalCTF_20190421" scheme="https://mrh1s.top/categories/write-up/nationalCTF-20190421/"/>
    
      <category term="sm4" scheme="https://mrh1s.top/categories/write-up/nationalCTF-20190421/sm4/"/>
    
      <category term="base64" scheme="https://mrh1s.top/categories/write-up/nationalCTF-20190421/sm4/base64/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="VM" scheme="https://mrh1s.top/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学 RE-WxyVM2</title>
    <link href="https://mrh1s.top/posts/7f12b338/"/>
    <id>https://mrh1s.top/posts/7f12b338/</id>
    <published>2019-04-28T04:51:47.000Z</published>
    <updated>2019-05-07T15:57:41.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/uploads/WxyVM2.7z">WxyVM2</a></p><p>大概是要读这个程序里面的一段汇编代码，这段汇编代码非常长，连ida都无法反编译，但是非常有规律，可以通过写脚本来还原 这是初始化代码，估计是对加密的字符串进行还原的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005FE                 mov     cs:dword_694140, 9C06AA99h</span><br><span class="line">.text:0000000000400608                 mov     cs:dword_694144, 0B4B2B03Fh</span><br><span class="line">.text:0000000000400612                 mov     cs:dword_694148, 0C51F73CFh</span><br><span class="line">.text:000000000040061C                 mov     cs:dword_69414C, 223520F8h</span><br><span class="line">.text:0000000000400626                 mov     cs:dword_694150, 0C0C53B9h</span><br><span class="line">.text:0000000000400630                 mov     cs:dword_694154, 0B59C78EAh</span><br><span class="line">.text:000000000040063A                 mov     cs:dword_694158, 0F7DE2D34h</span><br><span class="line">.text:0000000000400644                 mov     cs:dword_69415C, 0B27EEE2Ch</span><br></pre></td></tr></table></figure><p>类似于下面这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000048BAF1                 mov     edx, cs:dword_694174</span><br><span class="line">.text:000000000048BAF7                 mov     eax, cs:dword_694178</span><br><span class="line">.text:000000000048BAFD                 xor     eax, edx</span><br><span class="line">.text:000000000048BAFF                 mov     cs:dword_694178, eax</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000048B93B                 movzx   eax, cs:byte_694116</span><br><span class="line">.text:000000000048B93C                 add     eax, 7Dh</span><br><span class="line">.text:000000000048B93F                 mov     cs:byte_694116, al</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000048B95C                 movzx   eax, cs:byte_694100</span><br><span class="line">.text:000000000048B95C                 xor     eax, 6Ah</span><br><span class="line">.text:000000000048B95F                 mov     cs:byte_694100, al</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000041DD09                 movzx   eax, cs:byte_69410F</span><br><span class="line">.text:000000000041DD09                 sub     eax, 6Eh</span><br><span class="line">.text:000000000041DD0C                 mov     cs:byte_69410F, al</span><br></pre></td></tr></table></figure><p>还有一种 我 mov 我 自 己</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040093E                 movzx   eax, cs:byte_694114</span><br><span class="line">.text:0000000000400945                 mov     cs:byte_694114, al</span><br></pre></td></tr></table></figure><hr><p>ida可以修改配置文件，这样就可以反编译了 byte_694100是字符串读入的起始地址 读取18h字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005CD                 call    _puts</span><br><span class="line">.text:00000000004005D2                 mov     esi, offset byte_694100</span><br><span class="line">.text:00000000004005D7                 mov     edi, offset format ; &quot;%s&quot;</span><br><span class="line">.text:00000000004005DC                 mov     eax, 0</span><br><span class="line">.text:00000000004005E1                 call    _ssanf</span><br></pre></td></tr></table></figure><p>694100~694117 查看汇编代码后发现很多操作都超出了这个内存的范围，而且最后也没有对这个内存进行任何修改，那么就应该直接舍去 先将所有汇编代码dump下来，用脚本筛掉垃圾代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string</span><span class="params">(line)</span>:</span></span><br><span class="line">    l = []</span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(line)):</span><br><span class="line">        <span class="keyword">if</span>(line[i] == <span class="string">' '</span> <span class="keyword">or</span> line[i] == <span class="string">','</span> <span class="keyword">or</span> i == len(line) - <span class="number">1</span>):<span class="comment">#如果读取到了末尾</span></span><br><span class="line">            <span class="keyword">if</span>(len(s) != <span class="number">0</span>):</span><br><span class="line">                l.append(s)</span><br><span class="line">                s = <span class="string">""</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = s + line[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">f = open(<span class="string">"code.dump"</span>, <span class="string">"r"</span>)</span><br><span class="line">fout = open(<span class="string">"decode.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="comment">#fout.write("Below is decoded code.\n(format:) addr [opt] num\n")</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    line = f.readline()</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(line == <span class="string">""</span>):</span><br><span class="line">        print(<span class="string">"正常退出"</span>)</span><br><span class="line">        fout.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tab = get_string(line)<span class="comment">#获取到一个汇编指令</span></span><br><span class="line">    <span class="keyword">if</span>(tab[<span class="number">1</span>] == <span class="string">"mov"</span>):<span class="comment">#如果是垃圾指令，就直接跳过</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(tab[<span class="number">1</span>] == <span class="string">"movzx"</span>):</span><br><span class="line">        addr = tab[<span class="number">3</span>]</span><br><span class="line">        addr = <span class="string">"0x"</span> + addr[<span class="number">8</span>::]<span class="comment">#获取地址信息</span></span><br><span class="line">        addr_num = int(addr, <span class="number">16</span>)</span><br><span class="line">        addr_num -= <span class="number">6897920</span> <span class="comment">#减去起始地址 得到偏移量</span></span><br><span class="line">        addr = str(addr_num)</span><br><span class="line"></span><br><span class="line">        line = f.readline()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tab = get_string(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tab[<span class="number">1</span>] != <span class="string">"mov"</span>):<span class="comment">#只有当这个指令不是mov的时候才进行判断，因为有一种垃圾指令是自己mov自己</span></span><br><span class="line">            <span class="keyword">if</span>(tab[<span class="number">1</span>] == <span class="string">"add"</span>):</span><br><span class="line">                opt = <span class="string">"+="</span></span><br><span class="line">            <span class="keyword">elif</span>(tab[<span class="number">1</span>] == <span class="string">"xor"</span>):</span><br><span class="line">                opt = <span class="string">"^="</span></span><br><span class="line">            <span class="keyword">elif</span>(tab[<span class="number">1</span>] == <span class="string">"sub"</span>):</span><br><span class="line">                opt = <span class="string">"-="</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"something goes wrong! "</span> + tab[<span class="number">1</span>] + <span class="string">" at :"</span> + str(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            s = tab[<span class="number">3</span>]</span><br><span class="line">    <span class="comment">#        s = s[:-1:]</span></span><br><span class="line">    <span class="comment">#        s = "0x" + s</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">-1</span>] == <span class="string">"h"</span>):</span><br><span class="line">                s = s[:<span class="number">-1</span>]</span><br><span class="line">            s = <span class="string">"0x"</span> + s</span><br><span class="line"></span><br><span class="line">            s = str(int(s, <span class="number">16</span>) % <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">            line = f.readline()</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            fout.write(addr + <span class="string">" "</span> + opt + <span class="string">" "</span> + s + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"something goes wrong! "</span> + tab[<span class="number">1</span>] + <span class="string">" at :"</span> + str(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line">fout.close()</span><br></pre></td></tr></table></figure><p>得到类似于如下的数据</p><pre><code>23 += 113 += 315 += 7823 += 1092 -= 251 -= 4811 += 12313 ^= 3823 ^= 8912 += 311 -= 513 += 754 ^= 725 -= 884 -= 1070 ^= 6023 ^= 27</code></pre><p>再写python进行逆向计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string</span><span class="params">(line)</span>:</span></span><br><span class="line">    l = []</span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(line)):</span><br><span class="line">        <span class="keyword">if</span>(line[i] == <span class="string">' '</span> ):<span class="comment">#如果读取到了末尾</span></span><br><span class="line">            <span class="keyword">if</span>(len(s) != <span class="number">0</span>):</span><br><span class="line">                l.append(s)</span><br><span class="line">                s = <span class="string">""</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = s + line[i]</span><br><span class="line">    <span class="keyword">if</span>(len(s) != <span class="number">0</span>):</span><br><span class="line">        l.append(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">enc =[<span class="number">0xC0</span>,<span class="number">0x85</span>,<span class="number">0xF9</span>,<span class="number">0x6C</span>,<span class="number">0xE2</span>,<span class="number">0x14</span>,<span class="number">0xBB</span>,<span class="number">0xe4</span>,<span class="number">0xd</span>,<span class="number">0x59</span>,<span class="number">0x1c</span>,<span class="number">0x23</span>,<span class="number">0x88</span>,<span class="number">0x6e</span>,<span class="number">0x9b</span>,<span class="number">0xca</span>,<span class="number">0xba</span>,<span class="number">0x5c</span>,<span class="number">0x37</span>,<span class="number">0xfff</span>,<span class="number">0x48</span>,<span class="number">0xd8</span>,<span class="number">0x1f</span>,<span class="number">0xab</span>,<span class="number">0xa5</span>]</span><br></pre></td></tr></table></figure><p>​<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"decode.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">all = []</span><br><span class="line"></span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="keyword">if</span>(line == <span class="string">""</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    all.append(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">0</span>):</span><br><span class="line">    line = all[i]</span><br><span class="line">    tab = get_string(line)</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tab[<span class="number">1</span>] == <span class="string">"+="</span>):</span><br><span class="line">        enc[int(tab[<span class="number">0</span>])] -= int(tab[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">elif</span>(tab[<span class="number">1</span>] == <span class="string">"-="</span>):</span><br><span class="line">        enc[int(tab[<span class="number">0</span>])] += int(tab[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        enc[int(tab[<span class="number">0</span>])] ^= int(tab[<span class="number">2</span>])</span><br><span class="line">    enc[int(tab[<span class="number">0</span>])] %= <span class="number">128</span></span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    ans = ans + chr(c)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure></p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="cgctf" scheme="https://mrh1s.top/categories/write-up/cgctf/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="VM" scheme="https://mrh1s.top/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>壳相关</title>
    <link href="https://mrh1s.top/posts/6d13a265/"/>
    <id>https://mrh1s.top/posts/6d13a265/</id>
    <published>2019-04-12T17:22:09.000Z</published>
    <updated>2019-05-08T04:55:23.797Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>壳主要是用来混淆代码，让你找不到程序入口点的，通常带壳程序可以用PEid来分析并且用相应的工具去除，如果去除失败的话，就只能手动调试了</p></blockquote><h5 id="重点：ESP定律法"><a href="#重点：ESP定律法" class="headerlink" title="重点：ESP定律法"></a>重点：ESP定律法</h5><p><a href="https://blog.csdn.net/qiurisuixiang/article/details/7649799" target="_blank" rel="noopener">https://blog.csdn.net/qiurisuixiang/article/details/7649799</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="notes" scheme="https://mrh1s.top/categories/notes/"/>
    
    
      <category term="RE_Dynamic" scheme="https://mrh1s.top/tags/RE-Dynamic/"/>
    
  </entry>
  
  <entry>
    <title>ShinyShot!</title>
    <link href="https://mrh1s.top/posts/ab82ece6/"/>
    <id>https://mrh1s.top/posts/ab82ece6/</id>
    <published>2019-03-22T03:00:30.000Z</published>
    <updated>2019-05-08T04:55:52.469Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/uploads/utf-8-ShinyShot.7z">utf-8’ ‘ShinyShot!</a></p><blockquote><p>这个程序主要是利用了smc（动态代码修改技术）</p></blockquote><blockquote><p>首先我们向程序里面输入一个数，然后这个程序利用这个数去修改了一些程序的代码</p></blockquote><blockquote><p>然后输入一个字符串，将字符串base64加密后得到的密文与程序尾所保存的字符串进行比较，如果相同，则flag正确</p></blockquote><p>程序在我们输入了一个数字之后</p><p>执行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)TopLevelExceptionFilter + (<span class="built_in">cout</span> &gt;&gt; <span class="number">3</span>)) ^= <span class="number">1</span> &lt;&lt; (<span class="built_in">cout</span> &amp; <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>这个指令，TopLevelExceptionFilter的意义暂时不明白，大概就是一个指向某个内存的指针，简记为T, 值为0x401000</p><p>程序把*(p + (cout &gt;&gt; 3)) 处的数据异或了一个1 &lt;&lt; (cout &amp; 7)</p><p>其实1 &lt;&lt; (cout &amp; 7)就是将1左移了几位</p><p>我们看到后面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:004018DE EB 15             jmp     short loc_4018F5</span><br><span class="line">.text:004018E0                   ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004018E0</span><br><span class="line">.text:004018E0                   loc_4018E0:                   ; CODE XREF: sub_4017AA+126↑j</span><br><span class="line">.text:004018E0 E8 A7 FE FF FF    call    sub_40178C</span><br><span class="line">.text:004018E5                   ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004018E5</span><br><span class="line">.text:004018E5                   loc_4018E5:</span><br><span class="line">.text:004018E5 8D 85 40 FF FF FF lea     eax, [ebp-0C0h]</span><br><span class="line">.text:004018EB 89 44 24 04       mov     [esp+414h+var_410], eax ; char *</span><br><span class="line">.text:004018EF 8D 45 A4          lea     eax, [ebp+Buf]</span><br><span class="line">.text:004018F2 89 04 24          mov     [esp+414h+var_414], eax ; char *</span><br><span class="line">.text:004018F5</span><br><span class="line">.text:004018F5                   loc_4018F5:                   ; CODE XREF: sub_4017AA+134↑j</span><br><span class="line">.text:004018F5 E8 00 FC FF FF    call    sub_4014FA</span><br></pre></td></tr></table></figure><p>0x 004018DE  jmp 15 的意义是，除开jmp 15，往后数0x15个字节，将程序运行指针设置到此处。</p><p>而sub_4014FA是一个需要两个参数的函数，没有参数的传入，函数一定不会有正确答案。</p><p>所以我们应当将 jmp 15改为jmp到传入参数的位置</p><p>经过计算jmp 5 即可，现在我们的工作是要把0x004018DF处的15修改为5</p><p>0x15 = ‭00010101‬</p><p>0x5   =  00000101</p><p>也就是把第五位的1抹掉就行了，之前那个不明意义的内存修改就是这个用处了。</p><p>num = (0x8df&lt;&lt;3) + 0x4 = 18172</p><p>后面是一个base64加密，但闲鱼本人并不是密码学选手，太菜了，所以暂时跳过。。</p><p>最后将改版的base64加密后的字符串与程序内的进行比较，得到flag</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="hgame_20190122" scheme="https://mrh1s.top/categories/write-up/hgame-20190122/"/>
    
    
      <category term="RE_Dynamic" scheme="https://mrh1s.top/tags/RE-Dynamic/"/>
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="SMC" scheme="https://mrh1s.top/tags/SMC/"/>
    
  </entry>
  
  <entry>
    <title>HappyVM</title>
    <link href="https://mrh1s.top/posts/461ecec/"/>
    <id>https://mrh1s.top/posts/461ecec/</id>
    <published>2019-03-21T14:25:17.000Z</published>
    <updated>2019-05-07T15:57:54.014Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/uploads/happyVM.7z">happyVM</a></p><blockquote><p>第一次做VM题，花了很多时间，最终还是有所收获</p></blockquote><p>首先逆向虚拟机的操作数，操作数无非几个操作：压栈，出栈，寄存器与内存之间的读写，寄存器与寄存器之间的赋值</p><p>使用如下代码配合ida python获得所有操作数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x400D40</span></span><br><span class="line">cnt = <span class="number">0x78</span><span class="number">-0x40</span>+<span class="number">1</span></span><br><span class="line">i = addr</span><br><span class="line"><span class="keyword">print</span> <span class="string">"********my calc********"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"********my calc********"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"********my calc********"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"********my calc********"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"********my calc********"</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= addr + cnt <span class="number">-1</span>):</span><br><span class="line">        c = int(Byte(i))</span><br><span class="line">            <span class="keyword">if</span>(c <span class="keyword">in</span> [<span class="number">0x0</span>,<span class="number">0x8</span>,<span class="number">0x9</span>,<span class="number">0xA</span>,<span class="number">0xC</span>,<span class="number">0xD</span>,<span class="number">0xE</span>,<span class="number">0x11</span>,<span class="number">0x13</span>,<span class="number">0x14</span>]):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"opt:"</span> , hex(c) , <span class="string">"   data:"</span>,  hex(Byte(i))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"opt:"</span> , hex(c)</span><br><span class="line">                i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">0(0x00) : opt: 0x11    data: 0x2d</span><br><span class="line">2(0x01) : opt: 0x0    data: 0x22</span><br><span class="line">4 : opt: 0x5</span><br><span class="line">5 : opt: 0x10</span><br><span class="line">6 : opt: 0x14    data: 0x9</span><br><span class="line">8 : opt: 0x17</span><br><span class="line">9(0x9) : opt: 0x0    data: 0x32</span><br><span class="line">11 : opt: 0x5</span><br><span class="line">12 : opt: 0x3</span><br><span class="line">13 : opt: 0x11    data: 0x16</span><br><span class="line">15 : opt: 0x6</span><br><span class="line">16 : opt: 0x0    data: 0x16</span><br><span class="line">18 : opt: 0x5</span><br><span class="line">19 : opt: 0x11    data: 0x16</span><br><span class="line">21 : opt: 0x17</span><br><span class="line">22(0x16) : opt: 0xe    data: 0x1</span><br><span class="line">24 : opt: 0x15</span><br><span class="line">25 : opt: 0x4</span><br><span class="line">26 : opt: 0xf</span><br><span class="line">27 : opt: 0x1</span><br><span class="line">28 : opt: 0x16</span><br><span class="line">29 : opt: 0x2</span><br><span class="line">30 : opt: 0x0    data: 0x0</span><br><span class="line">32 : opt: 0x4</span><br><span class="line">33 : opt: 0x3</span><br><span class="line">34 : opt: 0x5</span><br><span class="line">35 : opt: 0x10</span><br><span class="line">36 : opt: 0x14    data: 0x2b</span><br><span class="line">38 : opt: 0x5</span><br><span class="line">39 : opt: 0x9    data: 0x3</span><br><span class="line">41 : opt: 0x13    data: 0x16</span><br><span class="line">43(0x2b) : opt: 0x5</span><br><span class="line">44 : opt: 0x12</span><br><span class="line"></span><br><span class="line">45(0x2d) : opt: 0x15</span><br><span class="line">46 : opt: 0x4</span><br><span class="line">47 : opt: 0x10</span><br><span class="line">48 : opt: 0x14    data: 0x36</span><br><span class="line">50 : opt: 0xa    data: 0x1</span><br><span class="line">52 : opt: 0x13    data: 0x2d</span><br><span class="line"></span><br><span class="line">54(0x36) : opt: 0x3</span><br><span class="line">55 : opt: 0x4</span><br><span class="line">56 : opt: 0x12</span><br></pre></td></tr></table></figure><p>逐行翻译，其中部分压栈与出栈操作可以合并为内存与寄存器，寄存器与寄存器之间的数据交换，翻译得到如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">simplify:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call <span class="number">0x2d</span>;<span class="comment">//strlen(str)</span></span><br><span class="line">B = <span class="number">0x22</span>;</span><br><span class="line"><span class="keyword">if</span>(A != B) <span class="keyword">return</span>;<span class="comment">//字符串长度为0x22</span></span><br><span class="line"><span class="number">0x9</span>:</span><br><span class="line">B = <span class="number">0x32</span>;</span><br><span class="line">push(C);<span class="comment">//此时C = 0x22</span></span><br><span class="line">call(<span class="number">0x16</span>);</span><br><span class="line">C = pop();</span><br><span class="line">B = <span class="number">0x16</span>;</span><br><span class="line">call(<span class="number">0x16</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">0x16</span>:</span><br><span class="line">C--;<span class="comment">//倒序处理整个字符串</span></span><br><span class="line">A = str[C];</span><br><span class="line">A ^= B;<span class="comment">//str[C] = str[C] ^ B ，而且B每次加3</span></span><br><span class="line">str[C] = A;</span><br><span class="line">push(B);</span><br><span class="line">A = <span class="number">0</span>;</span><br><span class="line">B = C;</span><br><span class="line"><span class="keyword">if</span>(A == B)&#123;<span class="comment">//如果这个字符串已经处理完成</span></span><br><span class="line"><span class="keyword">goto</span> <span class="number">0x2b</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">B = pop();</span><br><span class="line">B += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">goto</span> <span class="number">0x16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0x2b</span>:</span><br><span class="line">B = pop();</span><br><span class="line"></span><br><span class="line"><span class="number">0x2d</span>:</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">A = str[C];</span><br><span class="line"><span class="keyword">if</span>(A == B) <span class="keyword">break</span>;</span><br><span class="line">C++;</span><br><span class="line">&#125;<span class="keyword">while</span>(A != B)</span><br><span class="line"></span><br><span class="line">A = C;</span><br><span class="line">ret;</span><br></pre></td></tr></table></figure><p>最后获取到s2的数据，solve</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str = [<span class="number">132</span> , <span class="number">131</span> , <span class="number">157</span> , <span class="number">145</span> , <span class="number">129</span> , <span class="number">151</span> , <span class="number">215</span> , <span class="number">190</span> , <span class="number">67</span> , <span class="number">114</span> , <span class="number">97</span> , <span class="number">115</span> , <span class="number">115</span> , <span class="number">12</span> , <span class="number">106</span> , <span class="number">112</span> , <span class="number">115</span> , <span class="number">17</span> , <span class="number">72</span> , <span class="number">44</span> , <span class="number">52</span> , <span class="number">51</span> , <span class="number">49</span> , <span class="number">54</span> , <span class="number">35</span> , <span class="number">52</span> , <span class="number">62</span> , <span class="number">92</span> , <span class="number">35</span> , <span class="number">78</span> , <span class="number">23</span> , <span class="number">17</span> , <span class="number">25</span> , <span class="number">89</span> ]</span><br><span class="line">B = <span class="number">0x16</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x21</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    str[i] = str[i] ^ B</span><br><span class="line">    B += <span class="number">3</span></span><br><span class="line"></span><br><span class="line">B = <span class="number">0x32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x21</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    str[i] = str[i] ^ B</span><br><span class="line">    B += <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x22</span>):</span><br><span class="line">    print(chr(str[i]),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="hgame_20190122" scheme="https://mrh1s.top/categories/write-up/hgame-20190122/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
      <category term="VM" scheme="https://mrh1s.top/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>maze</title>
    <link href="https://mrh1s.top/posts/4915557e/"/>
    <id>https://mrh1s.top/posts/4915557e/</id>
    <published>2019-02-16T08:22:32.000Z</published>
    <updated>2019-05-04T15:39:44.423Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/uploads/maze.7z">maze</a> 迷宫题，用正确的方式走出迷宫即可，wsad分别控制上下左右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">aaa = <span class="string">"""11111111111111111111111111111111111111111111111111111111111111111111...............111111111111111...............111</span></span><br><span class="line"><span class="string">    111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111</span></span><br><span class="line"><span class="string">    .111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111s111111111111111.111111111</span></span><br><span class="line"><span class="string">    1111s111111111111111.11111111111111111111111111111.11111111111111111111111111111.11111111111111111111111111111.11111</span></span><br><span class="line"><span class="string">    111111111111111111111111.11111111111111111111111111111.1111.111111111111111111111111.1t............111111111111111.1</span></span><br><span class="line"><span class="string">    t............111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.1111111111111</span></span><br><span class="line"><span class="string">    11.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111</span></span><br><span class="line"><span class="string">    111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.11111</span></span><br><span class="line"><span class="string">    1111111111.1111111111111.111111111111111...............111111111111111...............1111111111111111111111111111111</span></span><br><span class="line"><span class="string">    111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"""</span></span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">map = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> aaa:</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">'\n'</span> <span class="keyword">and</span> c != <span class="string">' '</span>):</span><br><span class="line">        map = map + c</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(cnt % <span class="number">60</span> == <span class="number">0</span>):</span><br><span class="line">            map = map + <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">print(map)</span><br></pre></td></tr></table></figure><p>得到如下地图：</p><pre><code>11111111111111111111111111111111111111111111111111111111111111111111...............111111111111111...............111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111.111111111111111.1111111111111s111111111111111.1111111111111s111111111111111.11111111111111111111111111111.11111111111111111111111111111.11111111111111111111111111111.11111111111111111111111111111.11111111111111111111111111111.1111.111111111111111111111111.1t............111111111111111.1tcode></pre><p>走出迷宫即可： wwwwaaaaaaaaaaaaaasssssssssssssssddddddddddddddwwwwwwwaaaaaaaaaaaa</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="hgame_20190122" scheme="https://mrh1s.top/categories/write-up/hgame-20190122/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
  </entry>
  
  <entry>
    <title>brainfuck</title>
    <link href="https://mrh1s.top/posts/8616795e/"/>
    <id>https://mrh1s.top/posts/8616795e/</id>
    <published>2019-02-15T16:11:14.000Z</published>
    <updated>2019-05-05T05:50:02.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>brainfuck是一种小型化程序语言，符合图灵完全思想</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>指针加一</td></tr><tr><td>&lt;</td><td>指针减一</td></tr><tr><td>+</td><td>指针指向的字节的值加一</td></tr><tr><td>-</td><td>指针指向的字节的值减一</td></tr><tr><td>.</td><td>输出指针指向的单元内容（ASCⅡ码）</td></tr><tr><td>,</td><td>输入内容到指针指向的单元（ASCⅡ码）</td></tr><tr><td>[</td><td>如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处</td></tr><tr><td>]</td><td>如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处</td></tr></tbody></table><p>,.充当输入输出<br>+-用于数值操作<br>&lt;&gt;用于指针操作<br>[]用于循环（其中执行到”[“时，程序会判断当前指针所指空间是否为0，为0则终止循环，否则继续循环）</p><p>用更通俗一点的C语言来描述：</p><table><thead><tr><th>Brainfuck</th><th>C</th></tr></thead><tbody><tr><td>&gt;</td><td>++ptr;</td></tr><tr><td>&lt;</td><td>–ptr;</td></tr><tr><td>+</td><td>++*ptr;</td></tr><tr><td>-</td><td>–*ptr;</td></tr><tr><td>.</td><td>*ptr</td></tr><tr><td>,</td><td>*ptr =getch();</td></tr><tr><td>[</td><td>while (*ptr) {</td></tr><tr><td>]</td><td>}</td></tr></tbody></table><p><strong>当前位置清零</strong><br>[-] 将当前指针的值归零</p><p><strong>之前位置清零</strong><br>[[-]&lt;] 将当前指针以及之前的指针归零</p><p><strong>字符I/O</strong><br>,. 从键盘读取一个字符并输出到屏幕上。</p><p><strong>简单的循环</strong><br>,[.,] 这是一个连续从键盘读取字符并回显到屏幕上的循环。注意，这里假定0表示输入结束，事实上有些系统并非如此。以-1和”未改变”作为判断依据的程序代码分别是”,+[-.,+]”和”,[.[-],]”。</p><p><strong>指针维护</strong><br>“&gt;,[.&gt;,] “通过移动指针保存所有的输入，供后面的程序使用。</p><p><strong>加法</strong><br>[-&gt;+&lt;]  把当前位置的值加到后面的单元中（破坏性的加，它导致左边的单元被归零）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="notes" scheme="https://mrh1s.top/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Pro的Python教室(二)</title>
    <link href="https://mrh1s.top/posts/9ed4e6b7/"/>
    <id>https://mrh1s.top/posts/9ed4e6b7/</id>
    <published>2019-02-15T11:05:13.000Z</published>
    <updated>2019-05-04T15:39:44.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/uploads/secend.7z">secend</a> 很简单的一道题，python入门 使用如下网站进行反编译： <a href="https://tool.lu/pyc/" target="_blank" rel="noopener">https://tool.lu/pyc/</a> 得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"Welcome to Processor's Python Classroom Part 2!\n"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Now let's start the origin of Python!\n"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Plz Input Your Flag:\n'</span></span><br><span class="line">enc = raw_input()</span><br><span class="line">len = len(enc)</span><br><span class="line">enc1 = []</span><br><span class="line">enc2 = <span class="string">''</span></span><br><span class="line">aaa = <span class="string">'ioOavquaDb&#125;x2ha4[~ifqZaujQ#'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        enc1.append(chr(ord(enc[i]) + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    enc1.append(chr(ord(enc[i]) + <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">s1 = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len):</span><br><span class="line">        <span class="keyword">if</span> (i + x) % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            s1.append(enc1[i])</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">enc2 = enc2.join(s1)</span><br><span class="line"><span class="keyword">if</span> enc2 <span class="keyword">in</span> aaa:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"You 're Right!"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"You're Wrong!"</span></span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">aaa = <span class="string">'ioOavquaDb&#125;x2ha4[~ifqZaujQ#'</span></span><br><span class="line">list = list(aaa)</span><br><span class="line">len = len(aaa)</span><br><span class="line"></span><br><span class="line">dec1 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">dec2 = <span class="string">''</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len):</span><br><span class="line">        <span class="keyword">if</span> (i + x) % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            dec1[i] = list[cnt]</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        dec2 = dec2 + chr(ord(dec1[i]) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dec2 = dec2 + chr(ord(dec1[i]) - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(dec2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="write up" scheme="https://mrh1s.top/categories/write-up/"/>
    
      <category term="hgame_20190122" scheme="https://mrh1s.top/categories/write-up/hgame-20190122/"/>
    
    
      <category term="RE_Static" scheme="https://mrh1s.top/tags/RE-Static/"/>
    
  </entry>
  
</feed>
